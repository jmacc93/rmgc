[gd_scene load_steps=6 format=3 uid="uid://2dl7owj1fh7"]

[ext_resource type="PackedScene" uid="uid://bc4u5p3urh3h6" path="res://abilities/shots/basicSwipe2.tscn" id="1_50mec"]
[ext_resource type="PackedScene" uid="uid://bxq2rdalfohtw" path="res://ui/makeGearUiCell.tscn" id="2_b7aju"]
[ext_resource type="PackedScene" uid="uid://7rctdalryyyp" path="res://ui/allowTogglingUiCell.tscn" id="3_1lamk"]
[ext_resource type="Texture2D" uid="uid://c3wtykrn61wf6" path="res://abilities/shots/basicSwipe.png" id="4_w4biv"]

[sub_resource type="GDScript" id="GDScript_48n0u"]
script/source = "extends Node

@export var cast_speed = 5.0
@export var damage_mod = 1.0

@export var max_attack_rate = 20
@onready var attack_delay = int(float(10000) / float(max_attack_rate))
var next_attack_time = 0

@export var shot_resource: PackedScene


func _notification(notification):
  match notification:
    NOTIFICATION_UNPARENTED:
      toggle_equipped(false)


#shoot new shot toward target point / target object with shoot delay
func attack(user_object: Object) -> void:
  var current_time = Time.get_ticks_msec()
  if shot_resource and (next_attack_time < current_time):
    next_attack_time = current_time + attack_delay
    var shot = shot_resource.instantiate()
    
    #set shot origin
    var origin_position = Comp.get_object_meta(user_object, 'shot_origin', null)
    if origin_position == null:
      origin_position = user_object.get_prop('shot_origin') if user_object.has_method('get_prop') else null
    if origin_position == null:
      origin_position = user_object.global_position if ('global_position' in user_object) else null
    if origin_position == null:
      origin_position = Lib.get_parent_with_property(self, 'global_position').global_position
    shot.global_position = origin_position
    
    get_viewport().add_child(shot)
    
    #set shot parent object (the shot's creator)
    Watch.set_object_meta(shot, 'source_object', user_object)
    
    var dmg = shot.get_meta('dmg', 1.0)
    Watch.set_object_meta(shot, 'dmg', dmg * damage_mod)
    
    #try shooting toward target if it exists
    var target_point = Comp.get_object_meta(user_object, 'target_point', null)
    if origin_position == null:
      origin_position = Comp.get_object_meta(user_object, 'target_point') 
    if target_point == null:
      var target_object = Comp.get_object_meta(user_object, 'target_object')
      if target_object != null:
        target_point = target_object.global_position
    
    if target_point != null:
      if Comp.run_method(shot, 'cast_toward', [target_point, cast_speed]):
        return
      elif Comp.run_method(shot, 'shoot_in_dir', [(target_point - origin_position).normalized(), cast_speed]):
        return
      var shot_velocity = shot.get('velocity')
      if (shot_velocity != null) and ('velocity' in shot):
        shot.velocity = (target_point - origin_position).normalized() * cast_speed
        return
      else:
        push_error('Shot has no way of being projected toward target point')
        return
      
    #else, try shooting in a direction
    var shoot_dir = Comp.get_object_meta(user_object, 'shoot_dir')
    if shoot_dir != null:
      shoot_dir = shoot_dir.normalized()
      if Comp.run_method(shot, 'shoot_in_dir', [shoot_dir.normalized(), cast_speed]):
        return
      var shot_velocity = Comp.get_prop(shot, 'shot_velocity')
      if (shot_velocity != null) and ('velocity' in shot):
        shot.velocity = [shoot_dir.normalized() * cast_speed]
        return
      else:
        push_error('Shot has no way of being projected in shoot direction')
        return


func toggle_equipped(state: Variant = null) -> void:
  var user_object = get_parent()
  var new_equipped_status = (not is_in_group('main_attack')) if (state == null) else state
  if new_equipped_status:
    var can_equip = Comp.call_method_or(user_object, 'can_equip', [self], true)
    if not can_equip:
      return
    add_to_group('main_attack')
    add_to_group('equipped')
  else:
    remove_from_group('main_attack')
    remove_from_group('equipped')
  var toggleable_gear_cell_maker = $makeGearUiCell
  if toggleable_gear_cell_maker != null:
    Comp.run_method(toggleable_gear_cell_maker, 'toggle', [new_equipped_status])
  

func handle_left_clicked(event: InputEventMouse):
  get_viewport().set_input_as_handled()
  if Lib.is_dragging:
    return
  if not (event is InputEventMouseButton):
    return
  if event.pressed:
    return
  if event.shift_pressed:
    return
  if event.button_index != MOUSE_BUTTON_LEFT:
    return
  if get_parent() != Lib.player_character:
    return
  #only when not dragging, as child of player character, and left button just released:
  toggle_equipped()












"

[node name="produceShotGear" type="Node" groups=["ability", "gear"]]
script = SubResource("GDScript_48n0u")
cast_speed = 80.0
max_attack_rate = 40
shot_resource = ExtResource("1_50mec")
metadata/equipment_classes = ["weapon"]

[node name="makeGearUiCell" parent="." instance=ExtResource("2_b7aju")]

[node name="allowTogglingUiCell" parent="makeGearUiCell" instance=ExtResource("3_1lamk")]

[node name="templateGearCell" type="Control" parent="makeGearUiCell"]
process_mode = 4
visible = false
z_index = 10
custom_minimum_size = Vector2(10, 10)
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2

[node name="textureRect" type="TextureRect" parent="makeGearUiCell/templateGearCell"]
process_mode = 4
z_index = 10
custom_minimum_size = Vector2(10, 10)
layout_mode = 1
offset_right = 10.0
offset_bottom = 10.0
mouse_filter = 2
texture = ExtResource("4_w4biv")
expand_mode = 1
stretch_mode = 6

[node name="toggledOn" type="ColorRect" parent="makeGearUiCell/templateGearCell"]
visible = false
z_index = -1
layout_mode = 0
offset_left = 1.0
offset_top = -1.0
offset_right = 9.0
offset_bottom = 11.0
color = Color(0.478431, 0.541176, 1, 0.592157)
