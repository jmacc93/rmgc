[gd_scene load_steps=2 format=3 uid="uid://cytk41j43tol1"]

[sub_resource type="GDScript" id="GDScript_edgem"]
script/source = "extends Node

@export var wall_bit = 1

## restrict to a particular group, or leave blank to not restrict to a group
@export var group = ''


func _notification(what):
  match what:
    NOTIFICATION_PARENTED:
      Watch.call_on_notify(get_parent(), 'collision', on_collision)
    NOTIFICATION_UNPARENTED:
      Watch.stop_calling_on_notify(get_parent(), 'collision', on_collision)


func on_collision(collision):
  if not collision:
    return
  
  var parent = get_parent()
  var body = collision.get_collider()
  
  #only destroy self on collision with particular group?
  if (group != '') and (not body.is_in_group(group)):
      return
  
  #body has collision layer
  if not body.has_method('get_collision_layer_value'):
    return
  
  #body in collision layer?
  if not body.get_collision_layer_value(wall_bit):
    return
  
  #kill self
  Watch.notify(parent, 'die', [])
  if not Comp.run_method(parent, 'die', []):
    parent.queue_free()












"

[node name="destroySelfOnWallCollision" type="Node"]
editor_description = "This calls the `die` `Watch` notification on the parent and either calls the `die` method on the parent or `queue_free`s the parent when there is a `collision` `Watch` notification on the parent

This is primarily for removing a shot when it collides with a wall (eg: a rock)
"
script = SubResource("GDScript_edgem")
