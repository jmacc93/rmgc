[gd_scene load_steps=4 format=3]

[ext_resource type="PackedScene" uid="uid://ohxxvbakgamo" path="res://environment/generators/scatterObjectPlacer.tscn" id="1_0pxu6"]
[ext_resource type="PackedScene" uid="uid://cnxsns5hnsrsl" path="res://environment/lavaDecoration.tscn" id="2_4s4em"]

[sub_resource type="GDScript" id="GDScript_qeedt"]
script/source = "extends Node2D

@export_enum(\"Here\", \"ParentGameWorld\") var where = \"ParentGameWorld\"

@export_enum(\"Binormal\", \"Uniform\") var distribution = \"Binormal\"

@export_range(0.2, 5.0) var binormal_exp = 2.0

@export var spread = 1.0

@export var count = 10

@export var scene_pool : Array
var bias_list: Array

func _ready():
  (func():
    add_children_to_scene_pool()
    
    if scene_pool.size() == 0:
      return
    
    calculate_bias_list()
    
    for i in range(0, count):
      generate_one_child()
    
  ).call_deferred()


func add_children_to_scene_pool():
  for child in get_children():
    if not child.name.begins_with('template'):
      continue
    var scene = Lib.make_scene_from_node(child)
    scene_pool.push_back([scene, Comp.get_prop(child, 'generation_bias', 0.0)])
    remove_child(child)


func calculate_bias_list():
  bias_list = []
  var bias_sum = 0.0
  for resource_obj in scene_pool: #resource_obj is either resource, or [resource, bias value on [-inf, inf]]
    if resource_obj is Array:
      bias_sum += exp(resource_obj[1])
    else:
      bias_sum += 1.0
  for resource_obj in scene_pool:
    if resource_obj is Array:
      bias_list.push_back(exp(resource_obj[1]) / bias_sum)
    else:
      bias_list.push_back(1.0 / bias_sum)


func generate_one_child():
  var random_selection = Lib.random_index_with_probs(bias_list)
  var template_or_array = scene_pool[random_selection]
  var template
  if template_or_array is Array:
    template = template_or_array[0]
  else:
    template = template_or_array

  var new_scene
  if template is PackedScene:
    new_scene = template.instantiate()
  elif template is Node2D:
    new_scene = template.duplicate(DUPLICATE_GROUPS & DUPLICATE_SCRIPTS & DUPLICATE_SIGNALS)
#    new_scene = template.duplicate(DUPLICATE_USE_INSTANTIATION)

  match distribution:
    \"Binormal\": new_scene.global_position = global_position + Lib.rand_binormal_vec(spread, binormal_exp)
    \"Uniform\":  new_scene.global_position = global_position + Lib.rand_vec(spread)

  match where:
    \"Here\": 
      add_child(new_scene)
    \"ParentGameWorld\": 
      var game_world = Lib.get_parent_in_group(self, 'game_world')
      game_world.add_child(new_scene)
  
"

[node name="latent_nodes" type="Node"]

[node name="scatterObjectPlacer" parent="." instance=ExtResource("1_0pxu6")]

[node name="scatterObjectPlacer3" parent="." instance=ExtResource("1_0pxu6")]
position = Vector2(-72, -168)
spread = 100.0
scene_pool = [ExtResource("2_4s4em")]

[node name="scatterObjectPlacer2" type="Node2D" parent="."]
position = Vector2(92.7714, -30.7013)
script = SubResource("GDScript_qeedt")
