[gd_scene load_steps=6 format=3]

[ext_resource type="Texture2D" uid="uid://2ik0r18qqcdc" path="res://gear/containers/basic-loot-bag.png" id="1_dnb7g"]
[ext_resource type="PackedScene" uid="uid://dau0p74mlw7o" path="res://gear/containers/containerInventoryDisplay.tscn" id="3_uwonn"]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_qvo24"]
size = Vector2(6, 6)

[sub_resource type="GDScript" id="GDScript_756tj"]
script/source = "extends Node

@export var target_node_path : NodePath


func _notification(what):
  match what:
    NOTIFICATION_PARENTED:
      var parent = get_parent()
      parent.body_entered.connect(on_body_entered)
      parent.body_exited.connect(on_body_exited)
    NOTIFICATION_UNPARENTED:
      var parent = get_parent()
      parent.body_entered.disconnect(on_body_entered)
      parent.body_exited.disconnect(on_body_exited)


func on_body_entered(body: Node2D):
  if not ((body == Lib.player_character) or Lib.is_child_of(Lib.player_character, body)):
    return
  
  var target_node = get_node(target_node_path)
  if target_node == null:
    push_error('Could not find target node with given path ', target_node_path)
    return
  target_node.visible = true
  target_node.process_mode = PROCESS_MODE_INHERIT


func on_body_exited(body: Node2D):
  if not ((body == Lib.player_character) or Lib.is_child_of(Lib.player_character, body)):
    return
  
  var target_node = get_node(target_node_path)
  if target_node == null:
    push_error('Could not find target node with given path ', target_node_path)
    return
  target_node.visible = false
  target_node.process_mode = Node.PROCESS_MODE_DISABLED
"

[sub_resource type="GDScript" id="GDScript_t348g"]
script/source = "extends Node


func _notification(what):
  match what:
    NOTIFICATION_PARENTED:  
      if count_gear_nodes() == 0:
        destroy_parent.call_deferred()
      get_parent().child_exiting_tree.connect(on_child_exiting)
    
    NOTIFICATION_UNPARENTED:
      get_parent().child_exiting_tree.disconnect(on_child_exiting)


func count_gear_nodes():
  var count = 0
  for child in get_parent().get_children():
    if child.is_in_group('gear'):
      count += 1
  return count


func destroy_parent():
  if count_gear_nodes() == 0:
    get_parent().queue_free()


func on_child_exiting(_child: Node):
  if count_gear_nodes() == 1:
    destroy_parent.call_deferred()
"

[node name="basicLootBag" type="Node2D" groups=["container", "gear_container"]]
z_index = -1
metadata/ui_gear_cells = 10
metadata/accepts_gear_drops = true

[node name="Sprite2D" type="Sprite2D" parent="."]
scale = Vector2(0.75, 0.75)
texture = ExtResource("1_dnb7g")

[node name="displayVisibilityArea2D" type="Area2D" parent="."]
scale = Vector2(0.75, 0.75)
collision_layer = 0
collision_mask = 3

[node name="CollisionShape2D" type="CollisionShape2D" parent="displayVisibilityArea2D"]
shape = SubResource("RectangleShape2D_qvo24")

[node name="toggleVisibilityOnPlayerWalkOver" type="Node" parent="displayVisibilityArea2D"]
script = SubResource("GDScript_756tj")
target_node_path = NodePath("../../inventoryDisplay")

[node name="containerDestroyOnEmpty" type="Node" parent="."]
script = SubResource("GDScript_t348g")

[node name="inventoryDisplay" parent="." instance=ExtResource("3_uwonn")]
