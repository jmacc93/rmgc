[gd_scene load_steps=2 format=3 uid="uid://d0l3po3tbdq1j"]

[sub_resource type="GDScript" id="GDScript_jbjgw"]
script/source = "extends Node

@export var cast_speed = 5.0
@export var damage = 1.0

@export var max_attack_rate = 20
@onready var attack_delay = int(float(10000) / float(max_attack_rate))
var next_attack_time = 0

#note: multiple shots only valid when shot scene has 
@export var shot_count : int = 1
@export var multi_shot_angle = 45.0
@export_enum(\"Fan\", \"Random\", \"Cloud\") var multi_shot_type = \"Fan\"

@export var cloud_multishot_max_speedup_ratio = 0.1

@export var individual_shot_angle_spread = 0.0

@export var shot_instance_properties: Dictionary = {}


var generic_shot_scene: PackedScene = preload(\"res://shots/genericShot.tscn\")
@export var shot_file: Resource
var shot_file_scene_cache = [null, ''] #[loaded scene, cached file name]
#shot_file as a .tscn file: use an instance of that scene
#shot_file as a .png, etc file: use a generic shot and replae texture
#shot_file is anything else: use a generic shot with generic texture

func _notification(what):
  match what:
    NOTIFICATION_PARENTED:
      pass
    NOTIFICATION_UNPARENTED:
      if self.is_in_group('main_attack'):
        self.remove_from_group('main_attack')
      if self.is_in_group('equipped'):
        self.remove_from_group('equipped')


func make_shot_instance() -> Node:
  if shot_file is PackedScene:
    var ret_scene = shot_file.instantiate()
    return ret_scene
  elif shot_file is Texture: #shot_file is .png
    var ret_scene = generic_shot_scene.instantiate()
    ret_scene.get_node('Sprite2D').texture = shot_file
    return ret_scene
  else:
    return


func shoot_one(user_object: Object, origin: Vector2, dir: Vector2):
  var shot = make_shot_instance()
  if shot == null:
    return #probably bad shot_file given
  
  shot.global_position = origin
  
  get_viewport().add_child(shot)
  
  #set shot parent object (the shot's creator)
  Comp.set_prop(shot, 'source_object', user_object)
  
  Comp.set_prop(shot, 'dmg', damage)
  
  var cast_vec = dir * cast_speed
  
  #try casting via method
  if Comp.run_method(shot, 'cast_in_dir', [cast_vec]):
    return
  
  #fallback to setting velocity (if possible)
  Comp.set_prop(shot, 'velocity', cast_vec)
  

#shoot new shot toward target point / target object with shoot delay
func attack(user_object: Object) -> void:
  var current_time = Time.get_ticks_msec()
  if next_attack_time > current_time:
    return #can't attack yet
  
  next_attack_time = current_time + attack_delay
  
  #get shot origin
  var origin_position = Comp.get_prop(user_object, 'shot_origin', null)
  if origin_position == null:
    origin_position = user_object.get_prop('shot_origin') if user_object.has_method('get_prop') else null
    if origin_position == null:
      origin_position = user_object.global_position if ('global_position' in user_object) else null
      if origin_position == null:
        origin_position = Lib.get_parent_with_property(self, 'global_position').global_position
  
  #get target point
  var target_point = Comp.get_prop(user_object, 'target_point', null)
  if origin_position == null:
    origin_position = Comp.get_prop(user_object, 'target_point') 
    if target_point == null:
      var target_object = Comp.get_prop(user_object, 'target_object')
      if target_object != null:
        target_point = target_object.global_position
  
  var shoot_dir = (target_point - origin_position).normalized()
  
  if shot_count == 1:
    var spread_angle = randf_range(-1, 1) * individual_shot_angle_spread * (PI / 180)
    var final_shoot_dir = shoot_dir.rotated(spread_angle)
    shoot_one(user_object, origin_position, final_shoot_dir)
  else: #multiple shots
    match multi_shot_type:
      \"Fan\":
        var angle_step = 2.0 * multi_shot_angle / float(shot_count)
        for i in range(0, shot_count):
          var shot_angle = - multi_shot_angle + float(i) * angle_step
          var spread_angle = (shot_angle + randf_range(-1, 1) * individual_shot_angle_spread) * (PI / 180)
          var final_shoot_dir = shoot_dir.rotated(spread_angle)
          shoot_one(user_object, origin_position, final_shoot_dir)
      \"Random\":
        for i in range(0, shot_count):
          var spread_angle = randf_range(-1.0, 1.0) * multi_shot_angle * (PI / 180)
          var final_shoot_dir = shoot_dir.rotated(spread_angle)
          shoot_one(user_object, origin_position, final_shoot_dir)
      \"Cloud\":
        for i in range(0, shot_count):
          var spread_angle = randf_range(-1.0, 1.0) * multi_shot_angle * (PI / 180)
          var final_shoot_dir = shoot_dir.rotated(spread_angle) * (1 + randf_range(-1, 1) * cloud_multishot_max_speedup_ratio)
          shoot_one(user_object, origin_position, final_shoot_dir)


func toggle_equipped(user_object: Object) -> void:
  var equipped_status = is_in_group('equipped')
  if equipped_status:  
    remove_from_group('main_attack')
    remove_from_group('equipped')
  else:
    var can_equip = Comp.call_method_or(user_object, 'can_equip', [self])
    if not can_equip:
      return
    add_to_group('main_attack')
    add_to_group('equipped')
  var toggleable_gear_cell_maker = $makeGearUiCell
  if toggleable_gear_cell_maker != null:
    Comp.run_method(toggleable_gear_cell_maker, 'toggle', [not equipped_status])
  

func handle_left_clicked(event: InputEventMouse):
  get_viewport().set_input_as_handled()
  if Lib.is_dragging:
    return
  if not (event is InputEventMouseButton):
    return
  if event.pressed:
    return
  if event.button_index != MOUSE_BUTTON_LEFT:
    return
  if get_parent() != Lib.player_character:
    return
  #only when not dragging, as child of player character, and left button just released:
  toggle_equipped(Lib.player_character)












"

[node name="produceShot" type="Node" groups=["gear"]]
script = SubResource("GDScript_jbjgw")
max_attack_rate = 40
metadata/equipment_classes = ["weapon"]
