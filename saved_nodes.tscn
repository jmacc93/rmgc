[gd_scene load_steps=146 format=3 uid="uid://c7uj8ms18c2ge"]

[ext_resource type="PackedScene" uid="uid://cobqy5hc38ufe" path="res://characters/playableCharacters/genericAdventurer.tscn" id="1_mg3gl"]
[ext_resource type="Texture2D" uid="uid://cqkcdtutppkba" path="res://items/hp-flask.png" id="2_0f1mu"]
[ext_resource type="Script" path="res://compositeNode.gd" id="3_akax0"]
[ext_resource type="Script" path="res://characters/hpFlaskAbility.gd" id="4_toscw"]
[ext_resource type="Script" path="res://characters/walkAbility.gd" id="5_4jc16"]
[ext_resource type="Script" path="res://characters/playableCharacters/moveCharacterOnAction.gd" id="6_gwncv"]
[ext_resource type="Script" path="res://characters/healthStats.gd" id="7_fj1jy"]
[ext_resource type="Script" path="res://characters/dieOnZeroHp.gd" id="8_50eih"]
[ext_resource type="Script" path="res://characters/inSingleFaction.gd" id="9_gbaly"]
[ext_resource type="Script" path="res://characters/playableCharacters/mainAttackOnAction.gd" id="10_8sge6"]
[ext_resource type="Script" path="res://characters/playableCharacters/setTargetPointToMouseLocation.gd" id="11_jx7sd"]
[ext_resource type="Texture2D" uid="uid://b03kf4gmcmdm7" path="res://abilities/weapons/basicSword.png" id="12_42agh"]
[ext_resource type="Script" path="res://basicWeaponAttackAbility.gd" id="13_o27i6"]
[ext_resource type="PackedScene" uid="uid://cq7jkqg3pv2o8" path="res://abilities/shots/basicSwipe_old.tscn" id="14_6fypr"]
[ext_resource type="Script" path="res://characters/makeBasicDamagePopups.gd" id="15_44pn0"]
[ext_resource type="Texture2D" uid="uid://b3wyngm1q544d" path="res://ui/ui-box-2.png" id="16_6nese"]
[ext_resource type="Texture2D" uid="uid://comd2csjxuaci" path="res://ui/expander.png" id="17_c6xje"]
[ext_resource type="Script" path="res://ui/syncRangeToCharacterStat.gd" id="18_5cse6"]
[ext_resource type="Texture2D" uid="uid://xowd1blkqofx" path="res://ui/hp-bar-1.png" id="19_trqbl"]
[ext_resource type="Script" path="res://ui/mirrorGearNodesToUi.gd" id="20_n61d3"]
[ext_resource type="Script" path="res://produceShotAbility.gd" id="21_7cokh"]
[ext_resource type="Texture2D" uid="uid://c3wtykrn61wf6" path="res://abilities/shots/basicSwipe.png" id="22_b0cmj"]
[ext_resource type="Texture2D" uid="uid://nprr321ewwia" path="res://items/basic-armor-1.png" id="23_05j5w"]
[ext_resource type="PackedScene" uid="uid://bqtm2kgmesrsj" path="res://enemies/genericEnemy1.tscn" id="24_i2yh1"]
[ext_resource type="Material" uid="uid://on8q1sp20o0w" path="res://outlineMaterial.tres" id="25_gh44a"]
[ext_resource type="Texture2D" uid="uid://b52jquxvluu7v" path="res://enemies/ash-mote-1.png" id="26_8fbmb"]
[ext_resource type="PackedScene" uid="uid://gc6pi05kuktp" path="res://copyMetaToParent.tscn" id="27_2cfos"]
[ext_resource type="Texture2D" uid="uid://btel35amx7ar0" path="res://white_point.png" id="28_8j0kq"]
[ext_resource type="PackedScene" uid="uid://b4w5idye15i38" path="res://characters/dieOnZeroHp.tscn" id="29_ysf1c"]
[ext_resource type="PackedScene" uid="uid://c1r4djsndgyme" path="res://items/basicArmor1.tscn" id="30_2h6sa"]
[ext_resource type="PackedScene" uid="uid://dn8ekob6hhfv4" path="res://ui/syncRangeToCharacterStat.tscn" id="31_tso66"]
[ext_resource type="PackedScene" uid="uid://yn2hfhus4y1p" path="res://items/mirrorParentGearNodesHere.tscn" id="32_d87xt"]
[ext_resource type="PackedScene" uid="uid://dt0l2qsjnfbnb" path="res://items/basicLootBag.tscn" id="33_6g6co"]
[ext_resource type="Texture2D" uid="uid://2ik0r18qqcdc" path="res://items/basic-loot-bag.png" id="34_oxwld"]
[ext_resource type="PackedScene" uid="uid://dt2kb2yrwlot0" path="res://environment/smallRock1.tscn" id="35_ssfj1"]
[ext_resource type="PackedScene" uid="uid://dxyw0xj7631nd" path="res://environment/worlds/ashlands/ashlandsWorld.tscn" id="36_vrir7"]
[ext_resource type="PackedScene" uid="uid://bwbt72svh4xmp" path="res://items/toggleLootDisplayVisibilityOnClick.tscn" id="37_qq3il"]

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_tsxmw"]
bg_color = Color(0.6, 0.6, 0.6, 0)

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_12e5e"]
bg_color = Color(1, 0, 0, 1)

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_wcgdt"]
bg_color = Color(0.831373, 0, 0.937255, 1)

[sub_resource type="ImageTexture" id="ImageTexture_2i77b"]

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_tjt43"]

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_fhtwg"]

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_tnjyo"]

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_xrhdm"]

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_6iuja"]

[sub_resource type="Theme" id="Theme_xtp7f"]
HScrollBar/icons/decrement = SubResource("ImageTexture_2i77b")
HScrollBar/icons/decrement_highlight = SubResource("ImageTexture_2i77b")
HScrollBar/icons/decrement_pressed = SubResource("ImageTexture_2i77b")
HScrollBar/icons/increment = SubResource("ImageTexture_2i77b")
HScrollBar/icons/increment_highlight = SubResource("ImageTexture_2i77b")
HScrollBar/icons/increment_pressed = SubResource("ImageTexture_2i77b")
HScrollBar/styles/grabber = SubResource("StyleBoxEmpty_tjt43")
HScrollBar/styles/grabber_highlight = SubResource("StyleBoxEmpty_fhtwg")
HScrollBar/styles/grabber_pressed = SubResource("StyleBoxEmpty_tnjyo")
HScrollBar/styles/scroll = SubResource("StyleBoxEmpty_xrhdm")
HScrollBar/styles/scroll_focus = SubResource("StyleBoxEmpty_6iuja")

[sub_resource type="GDScript" id="GDScript_6533p"]
script/source = "extends Node

var character_composite

@export var repeatedly = true
@export var action = 'shoot'

func _enter_tree():
  character_composite = Lib.get_parent_with_method(self, \"new_getter\")
  if not character_composite:
    push_error('No character_composite parent found')
    queue_free()
    return

var pressed = false


func find_main_attack_ability_and_attack():
  var main_attack_node_list = Lib.get_children_in_group(character_composite, 'main_attack')
  for attack_node in main_attack_node_list:
    if attack_node.has_method('attack'):
      attack_node.attack(character_composite)
    elif attack_node.has_method('run_method'): #its a composite
      attack_node.run_method('attack', [character_composite])


func _unhandled_input(_event):
  if Input.is_action_just_pressed(action):
    pressed = true
    find_main_attack_ability_and_attack()

func _input(_event):
  if Input.is_action_just_released(action):
    pressed = false

func _process(_delta):
  if repeatedly and pressed:
    find_main_attack_ability_and_attack()
"

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_61jkb"]
bg_color = Color(0.6, 0.6, 0.6, 0)

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_wbpci"]
bg_color = Color(1, 0, 0, 1)

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_va6im"]
bg_color = Color(0.831373, 0, 0.937255, 1)

[sub_resource type="ImageTexture" id="ImageTexture_xc51v"]

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_7cxuy"]

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_ur35y"]

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_3i6mk"]

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_dskxa"]

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_gjgd5"]

[sub_resource type="Theme" id="Theme_6axxe"]
HScrollBar/icons/decrement = SubResource("ImageTexture_xc51v")
HScrollBar/icons/decrement_highlight = SubResource("ImageTexture_xc51v")
HScrollBar/icons/decrement_pressed = SubResource("ImageTexture_xc51v")
HScrollBar/icons/increment = SubResource("ImageTexture_xc51v")
HScrollBar/icons/increment_highlight = SubResource("ImageTexture_xc51v")
HScrollBar/icons/increment_pressed = SubResource("ImageTexture_xc51v")
HScrollBar/styles/grabber = SubResource("StyleBoxEmpty_7cxuy")
HScrollBar/styles/grabber_highlight = SubResource("StyleBoxEmpty_ur35y")
HScrollBar/styles/grabber_pressed = SubResource("StyleBoxEmpty_3i6mk")
HScrollBar/styles/scroll = SubResource("StyleBoxEmpty_dskxa")
HScrollBar/styles/scroll_focus = SubResource("StyleBoxEmpty_gjgd5")

[sub_resource type="GDScript" id="GDScript_o7ljt"]
script/source = "extends Node

var character_composite

@export var repeatedly = true
@export var action = 'shoot'

func _enter_tree():
  character_composite = Lib.get_parent_with_method(self, \"new_getter\")
  if not character_composite:
    push_error('No character_composite parent found')
    queue_free()
    return
  
  character_composite.new_method('equip_weapon', Callable(self, \"equip_weapon\"))
  
  #make sure main_attack group node is highlighted
  var main_attack_node = Lib.get_children_in_group(character_composite, 'main_attack')
  if main_attack_node.size() >= 1:
    Watch.set_object_meta(main_attack_node[0], 'ui_cell_highlight', true)

var pressed = false


func equip_weapon(weapon_node: Node):
  if weapon_node.is_in_group('main_attack'):
    weapon_node.remove_from_group('main_attack')
    Watch.set_object_meta(weapon_node, 'ui_cell_highlight', false)
    return
  #allow only one main_attack group node
  var current_main_attack_nodes = Lib.get_children_in_group(character_composite, 'main_attack')
  for node in current_main_attack_nodes:
    node.remove_from_group('main_attack')
    Watch.set_object_meta(weapon_node, 'ui_cell_highlight', false)
  weapon_node.add_to_group('main_attack')
  Watch.set_object_meta(weapon_node, 'ui_cell_highlight', true)


func find_main_attack_abilities_and_attack():
  var main_attack_node_list = Lib.get_children_in_group(character_composite, 'main_attack')
  for attack_node in main_attack_node_list:
    if attack_node.has_method('attack'):
      attack_node.attack(character_composite)
    elif attack_node.has_method('run_method'): #its a composite
      attack_node.run_method('attack', [character_composite])


func _unhandled_input(_event):
  if Input.is_action_just_pressed(action):
    pressed = true
    find_main_attack_abilities_and_attack()

func _input(_event):
  if Input.is_action_just_released(action):
    pressed = false

func _process(_delta):
  if repeatedly and pressed:
    find_main_attack_abilities_and_attack()
"

[sub_resource type="GDScript" id="GDScript_hhs6h"]
script/source = "extends Node

@export var cast_speed = 5.0
@export var damage_mod = 1.0

@export var max_attack_rate = 20
@onready var attack_delay = int(float(10000) / float(max_attack_rate))
var next_attack_time = 0

@export var shot_resource : PackedScene


#shoot new shot toward target point / target object with shoot delay
func attack(user_object: Object) -> void:
  var current_time = Time.get_ticks_msec()
  if shot_resource and (next_attack_time < current_time):
    next_attack_time = current_time + attack_delay
    var shot = shot_resource.instantiate()
    
    #set shot origin
    var origin_position = user_object.get_prop('shot_origin')
    if origin_position == null:
      origin_position = user_object.global_position if ('global_position' in user_object) else null
    if origin_position == null:
      origin_position = Lib.get_parent_with_property(self, 'global_position').global_position
    shot.global_position = origin_position
    
    get_viewport().add_child(shot)
    
    #set shot parent object (the shot's creator)
    shot.set_prop('parent_object', user_object)
    
    var dmg = shot.get_first_prop_in(['dmg', 'damage'], 1.0)
    shot.set_first_prop_in(['dmg', 'damage'], dmg * damage_mod)
    
    #try shooting toward target if it exists
    var target_point = user_object.get_prop('target_point')
    if target_point == null:
      var target_object = user_object.get_prop('target_object')
      if target_object != null:
        target_point = target_object.global_position
    
    if target_point != null:
      if shot.run_method('cast_toward', [target_point, cast_speed]):
        return
      elif shot.run_method('shoot_in_dir', [(target_point - origin_position).normalized(), cast_speed]):
        return
      var shot_velocity = shot.get_prop('velocity')
      if shot_velocity != null:
        shot.set_prop('velocity', (target_point - origin_position).normalized() * cast_speed)
        return
      else:
        push_error('Shot has no way of being projected toward target point')
        return
      
    #else, try shooting in a direction
    var shoot_dir = user_object.get_prop('shoot_dir')
    if shoot_dir != null:
      shoot_dir = shoot_dir.normalized()
      if shot.run_method('shoot_in_dir', [shoot_dir.normalized(), cast_speed]):
        return
      var shot_velocity = shot.get_prop('shot_velocity')
      if shot_velocity != null:
        shot.set_prop('velocity', [shoot_dir.normalized() * cast_speed])
        return
      else:
        push_error('Shot has no way of being projected in shoot direction')
        return


func equip(user_object: Object) -> void:
  if user_object.has_method('set_main_attack'):
    user_object.set_main_attack(Callable(self, 'attack'))
    return
  
  if user_object.has_method('equip'):
    user_object.equip(self)
    return
  
  if user_object.has_method('equip_weapon'):
    user_object.equip_weapon(self)
    return
  
  if not user_object.has_method('run_method'):
    return
  
  if user_object.run_method('equip', [self]):
    return
  
  if user_object.run_method('equip_weapon', [self]):
    return
  
  if user_object.has_prop('main_attack'):
    user_object.set_prop('main_attack', [Callable(self, 'attack')])
    return
  












"

[sub_resource type="GDScript" id="GDScript_y03ju"]
script/source = "extends Node

var use_count = 0

func use_flask(user: Object):
  var health = get_meta('health', 25)
  var max_uses = get_meta('max_uses', 1)
  
  print('use_flask on ', user)
  if user.has_method('call_method'): #is a composite
    user.call_method('heal_by', [health])
  elif user.has_method('heal_by'):
    user.heal_by(health)
  
  use_count += 1
  if (max_uses > -1) and (use_count >= max_uses):
    print('freeing flask')
    queue_free()
"

[sub_resource type="GDScript" id="GDScript_owfkt"]
script/source = "extends Node


func equip(user_object: Object):
  











"

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_d2d0h"]
bg_color = Color(0.6, 0.6, 0.6, 0)

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_estrh"]
bg_color = Color(1, 0, 0, 1)

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_oo5oy"]
bg_color = Color(0.831373, 0, 0.937255, 1)

[sub_resource type="ImageTexture" id="ImageTexture_203qm"]

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_g1rv7"]

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_nqg2u"]

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_7s532"]

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_vc3wa"]

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_4wyx3"]

[sub_resource type="Theme" id="Theme_4deh5"]
HScrollBar/icons/decrement = SubResource("ImageTexture_203qm")
HScrollBar/icons/decrement_highlight = SubResource("ImageTexture_203qm")
HScrollBar/icons/decrement_pressed = SubResource("ImageTexture_203qm")
HScrollBar/icons/increment = SubResource("ImageTexture_203qm")
HScrollBar/icons/increment_highlight = SubResource("ImageTexture_203qm")
HScrollBar/icons/increment_pressed = SubResource("ImageTexture_203qm")
HScrollBar/styles/grabber = SubResource("StyleBoxEmpty_g1rv7")
HScrollBar/styles/grabber_highlight = SubResource("StyleBoxEmpty_nqg2u")
HScrollBar/styles/grabber_pressed = SubResource("StyleBoxEmpty_7s532")
HScrollBar/styles/scroll = SubResource("StyleBoxEmpty_vc3wa")
HScrollBar/styles/scroll_focus = SubResource("StyleBoxEmpty_4wyx3")

[sub_resource type="RectangleShape2D" id="RectangleShape2D_fy1oa"]
size = Vector2(8, 8)

[sub_resource type="GDScript" id="GDScript_ku7us"]
script/source = "extends Node

@export var initial_max_hp = 100.0
@export var initial_hp = 100.0
@export var initial_hp_regen = 1.0 #hp / second

@export var initial_mdef = 1.0 #multiplicative defence, divides damage taken
@export var initial_adef = 0.0 #additive defence, subtracts from damage taken up to 0

@export var always_overheal = false
@export var can_overheal = false


func _enter_tree():
  var parent = get_parent()
  
  Watch.set_object_meta(parent, 'hp', initial_hp)
  Watch.set_object_meta(parent, 'max_hp', initial_max_hp)
  Watch.set_object_meta(parent, 'hp_regen', initial_hp_regen)
  Watch.set_object_meta(parent, 'mdef', initial_mdef)
  Watch.set_object_meta(parent, 'adef', initial_adef)
  
  Watch.set_object_meta(parent, 'heal_by', Callable(self, 'heal_by'))
  Watch.set_object_meta(parent, 'overheal_by', Callable(self, 'overheal_by'))
  Watch.set_object_meta(parent, 'hurt_by', Callable(self, 'hurt_by'))


func hurt_by(dmg: float, _dmger: Object):
  var parent = get_parent()
  var hp = parent.get_meta('hp')
  var mdef = parent.get_meta('mdef')
  var adef = parent.get_meta('adef')
  var new_hp = hp - max(0, dmg * mdef - adef)
  Watch.set_object_meta(parent, 'hp', new_hp)


func heal_by(change: float):
  var parent = get_parent()
  var hp = parent.get_meta('hp')
  var max_hp = parent.get_meta('max_hp')
  var new_hp = (hp + change) if always_overheal else min(max_hp, hp + change)
  Watch.set_object_meta(parent, 'hp', new_hp)


func overheal_by(change: float):
  if not can_overheal:
    heal_by(change)
    return
  var parent = get_parent()
  var hp = parent.get_meta('hp')
  var new_hp = hp + change
  Watch.set_object_meta(parent, 'hp', new_hp)












"

[sub_resource type="GDScript" id="GDScript_yh3vq"]
script/source = "extends Node

@export var initial_spd = 10.0

@export var disabled = false

var last_velocity : Vector2


func _enter_tree():
  var parent = get_parent()
  if not ('velocity' in parent):
    push_error('No velocity in parent')
    return
  if not parent.has_method('move_and_slide'):
    push_error('No move_and_slide in parent')
    return
  
  Watch.set_object_meta(parent, 'spd', initial_spd)
  Watch.set_object_meta(parent, 'walk_by', Callable(self, 'walk_by'))


#move in a particular direction, with collisions
func walk_by(vec: Vector2):
  if disabled:
    return

  if (vec.x == 0) and (vec.y == 0):
    return
  
  var parent = get_parent()
  var spd = parent.get_meta('spd')
  parent.velocity += vec * 6.0 * spd
  last_velocity = parent.velocity


func _physics_process(_delta):
  var parent = get_parent()
  if parent.velocity.x == 0 and parent.velocity.y == 0:
    return
  
  parent.move_and_slide()
  parent.velocity = Vector2(0, 0)
"

[sub_resource type="GDScript" id="GDScript_83ck8"]
script/source = "extends Node

var global_position_parent
    
@export var disabled = false

@export var stay_distance = 50.0


func _enter_tree():
  global_position_parent = self if ('global_position' in self) else null
  if global_position_parent == null:
    global_position_parent = Lib.get_parent_with_property(self, 'global_position')
  if not global_position_parent:
    push_error('No global position parent found')
    queue_free()    
    return


func _process(_delta):
  if disabled:
    return
  
  var parent = get_parent()
  
  #is there a target?
  var target_object = Comp.get_object_meta(parent, 'target_object')
  if (target_object == null) or (not is_instance_valid(target_object)) or (not ('global_position' in target_object)):
    return
  
  var targets_position = target_object.global_position
  var vec_to_target = global_position_parent.global_position - targets_position
  if vec_to_target.length() >= stay_distance:
    var adjusted_target_point = targets_position + vec_to_target.normalized() * stay_distance
    var move_vec = (adjusted_target_point - global_position_parent.global_position).normalized()
    Comp.call_method(parent, 'walk_by', [move_vec])
  



"

[sub_resource type="GDScript" id="GDScript_6rytb"]
script/source = "extends Node

var global_position_parent

@onready var debug_point : Node2D = get_node_or_null(\"debugPoint\")

@export var disabled = false

@export var movement_rate = 20.0

@export var move_to_radius = 20.0
var move_to_point = Vector2(0.0, 0.0)
var next_move_to_time = 0.0
var next_move_point_delay_ms = 1000


func _enter_tree():
  global_position_parent = self if ('global_position' in self) else null
  if global_position_parent == null:
    global_position_parent = Lib.get_parent_with_property(self, 'global_position')
  if not global_position_parent:
    push_error('No global position parent found')
    queue_free()    
    return
 

func _process(delta):
  if disabled:
    return
  
  var parent = get_parent()
  
  #find a new point to move to if close or old point is old
  var current_time = Time.get_ticks_msec()
  var move_to_vec = move_to_point - global_position_parent.global_position
  if (current_time > next_move_to_time) or (move_to_vec.length() < 1.0):
    move_to_point = global_position_parent.global_position + Lib.cs_vec(randf_range(0.0, 2*PI)) * move_to_radius
    next_move_to_time = current_time + next_move_point_delay_ms
    move_to_vec = move_to_point - global_position_parent.global_position
  
  #move toward that point
  Comp.call_method(parent, 'walk_by', [move_to_vec.normalized() * movement_rate * delta])
  
  if debug_point:
    debug_point.global_position = move_to_point

"

[sub_resource type="GDScript" id="GDScript_juai5"]
script/source = "extends Area2D

@export var hates_everyone = false

#does character love or hate obj?
func is_hostile_faction_array(my_faction_array, obj_faction_array):
  for my_faction in my_faction_array:
    #if any of parent my factions are in obj's faction_array then they're best buds
    var my_faction_in_object = (obj_faction_array.find(my_faction) != -1)
    if my_faction_in_object:
      return false #loves
  return true #hates


#is body an enemy? then target. Return true if targeted something
func test_and_switch_target_to_body(body):
  var parent = get_parent()
    
  #does body have a faction?
  if not body.has_meta('faction_array'):
    if hates_everyone and body.is_in_group('character'):
      Watch.set_object_meta(parent, 'target_object', body)
      return true
    else:
      return false
  var body_faction_array = body.get_meta('faction_array')
  
  #do I have a faction?
  var my_faction_array = Comp.get_object_meta(parent, 'faction_array')
  if my_faction_array == null:
    return false
  
  #compare faction arrays
  var obj_is_enemy = is_hostile_faction_array(my_faction_array, body_faction_array)
  if obj_is_enemy:
    Watch.set_object_meta(parent, 'target_object', body)
    return true
  
  #no action taken
  return false
  

#target characters and factioned objects that enter
func _on_targetNearestNonfaction_body_entered(body):
  var parent = get_parent()
  #dont do anything if already have target
  var target_object = Comp.get_object_meta(parent, 'target_object')
  if target_object != null:
    return
  
  #set new target if body is hostile faction
  test_and_switch_target_to_body(body)


#untarget active target if its far away, and then get a new target if there are any
func _on_targetNearestNonfaction_body_exited(body):
  var parent = get_parent()
  #dont untarget current target if it didnt just leave
  var target_object = Comp.get_object_meta(parent, 'target_object')
  if body != target_object:
    return
  
  #get a new target, if there is one still in this area
#  Watch.set_object_meta(parent, 'target_object', null)
  parent.set_meta('target_object', null)
  for overlapping_body in get_overlapping_bodies():
    var has_new_target = test_and_switch_target_to_body(overlapping_body)
    if has_new_target:
      return










"

[sub_resource type="RectangleShape2D" id="RectangleShape2D_v5uvg"]
size = Vector2(100, 100)

[sub_resource type="GDScript" id="GDScript_lrgv4"]
script/source = "extends Node

@onready var debug_point = $DebugPoint

var mirrored_target_object

func _enter_tree():
  var parent = get_parent()
  Watch.call_on_set_meta(parent, 'target_object', func():
    mirrored_target_object =  parent.get_meta('target_object')
  )


func _process(_delta):
  if (mirrored_target_object != null) and ('global_position' in mirrored_target_object):
    var target_point = mirrored_target_object.global_position
    Watch.set_object_meta(get_parent(), 'target_point', target_point)
    if debug_point != null:
      debug_point.global_position = target_point

"

[sub_resource type="GDScript" id="GDScript_c8wlx"]
script/source = "extends Node

@export var disabled = false

@export var msecs_between_attacks = 200
var next_attack_time = 0


func find_main_attack_ability_and_attack():
  var parent = get_parent()
  var main_attack_node_list = Lib.get_children_in_group(parent, 'main_attack')
  for attack_node in main_attack_node_list:
    if attack_node.has_method('attack'):
      attack_node.attack(parent)
    elif Comp.run_method(parent, 'attack', [parent]):
      return


func _process(_delta):
  if disabled:
    return
  
  var current_time = Time.get_ticks_msec()
  if next_attack_time > current_time:
    return
  
  #shoot if character has target
  var parent = get_parent()
  var target_object = Comp.get_object_meta(parent, 'target_object')
  if (target_object == null) or (not is_instance_valid(target_object)):
    return
  
  next_attack_time = current_time + msecs_between_attacks
  find_main_attack_ability_and_attack()
  
"

[sub_resource type="GDScript" id="GDScript_xo1bd"]
script/source = "extends Node2D

var composite

var damage_popup_resource : PackedScene = preload(\"res://damagePopup.tscn\")

var last_hp = 0

func _enter_tree():
  var parent = get_parent()
  Watch.call_on_set_meta(parent, 'hp', func():
    var hp = parent.get_meta('hp')
    var change = hp - last_hp
    if change == 0:
      return
    var damage_popup = damage_popup_resource.instantiate()
    damage_popup.set_damage(change)
    call_deferred('add_child', damage_popup)
    last_hp = hp
  )


func _ready():
  last_hp = get_parent().get_meta('hp')
"

[sub_resource type="GDScript" id="GDScript_7mxs5"]
script/source = "extends Node

@export var bag_scene: PackedScene

@export var guaranteed_loot_scenes: Array
@export var random_loot_scenes: Array
@export var random_drop_count = 0

func _enter_tree():
  var parent = get_parent()
  var global_position_parent = Lib.get_parent_with_property(self, 'global_position')
  Watch.call_on_notify(parent, 'die', func():
    print('dropLootOnDie')
    var bag_instance = bag_scene.instantiate()
    prints('  bag instance', bag_instance)
    get_tree().current_scene.call_deferred('add_child', bag_instance)
    bag_instance.global_position = global_position_parent.global_position
    
    #add guaranteed drops
    for loot_scene_obj in guaranteed_loot_scenes:
      if not loot_scene_obj.has_method('instantiate'):
        continue
      var loot_instance = loot_scene_obj.instantiate()
      bag_instance.call_deferred('add_child', loot_instance)
      prints('  guaranteed drops', loot_instance)
    
    #add random drops
    for i in range(0, random_drop_count):
      var random_loot_scene_obj = random_loot_scenes.pick_random()
      if not random_loot_scene_obj.has_method('instantiate'):
        continue
      var loot_instance = random_loot_scene_obj.instantiate()
      bag_instance.call_deferred('add_child', loot_instance)
  )










"

[sub_resource type="GDScript" id="GDScript_lk3t2"]
script/source = "extends Node

func _enter_tree():
  var parent = get_parent()
  Watch.call_on_notify(parent, 'die', func():
    parent.queue_free()
  )
"

[sub_resource type="GDScript" id="GDScript_warxp"]
script/source = "extends Node

@export var cast_speed = 5.0
@export var damage_mod = 1.0

@export var max_attack_rate = 20
@onready var attack_delay = int(float(10000) / float(max_attack_rate))
var next_attack_time = 0

@export var shot_resource : PackedScene


#shoot new shot toward target point / target object with shoot delay
func attack(user_object: Object) -> void:
  var current_time = Time.get_ticks_msec()
  if shot_resource and (next_attack_time < current_time):
    next_attack_time = current_time + attack_delay
    var shot = shot_resource.instantiate()
    
    #set shot origin
    var origin_position = Comp.get_object_meta(user_object, 'shot_origin', null)
    if origin_position == null:
      origin_position = user_object.get_prop('shot_origin') if user_object.has_method('get_prop') else null
    if origin_position == null:
      origin_position = user_object.global_position if ('global_position' in user_object) else null
    if origin_position == null:
      origin_position = Lib.get_parent_with_property(self, 'global_position').global_position
    shot.global_position = origin_position
    
    get_viewport().add_child(shot)
    
    #set shot parent object (the shot's creator)
    Watch.set_object_meta(shot, 'source_object', user_object)
    
    var dmg = shot.get_meta('dmg', 1.0)
    Watch.set_object_meta(shot, 'dmg', dmg * damage_mod)
    
    #try shooting toward target if it exists
    var target_point = Comp.get_object_meta(user_object, 'target_point', null)
    if origin_position == null:
      origin_position = Comp.get_object_meta(user_object, 'target_point') 
    if target_point == null:
      var target_object = Comp.get_object_meta(user_object, 'target_object')
      if target_object != null:
        target_point = target_object.global_position
    
    if target_point != null:
      if Comp.run_method(shot, 'cast_toward', [target_point, cast_speed]):
        return
      elif Comp.run_method(shot, 'shoot_in_dir', [(target_point - origin_position).normalized(), cast_speed]):
        return
      var shot_velocity = shot.get('velocity')
      if (shot_velocity != null) and ('velocity' in shot):
        shot.velocity = (target_point - origin_position).normalized() * cast_speed
        return
      else:
        push_error('Shot has no way of being projected toward target point')
        return
      
    #else, try shooting in a direction
    var shoot_dir = Comp.get_object_meta(user_object, 'shoot_dir')
    if shoot_dir != null:
      shoot_dir = shoot_dir.normalized()
      if Comp.run_method(shot, 'shoot_in_dir', [shoot_dir.normalized(), cast_speed]):
        return
      var shot_velocity = Comp.get_prop(shot, 'shot_velocity')
      if (shot_velocity != null) and ('velocity' in shot):
        shot.velocity = [shoot_dir.normalized() * cast_speed]
        return
      else:
        push_error('Shot has no way of being projected in shoot direction')
        return


func equip(user_object: Object) -> void:
  #direct method calls
  if user_object.has_method('set_main_attack'):
    user_object.set_main_attack(Callable(self, 'attack'))
    return
  
  if user_object.has_method('equip'):
    user_object.equip(self)
    return
  
  if user_object.has_method('equip_weapon'):
    user_object.equip_weapon(self)
    return
  
  #meta composite object
  if Comp.run_method(user_object, 'equip', [self]):
    return
  
  if Comp.run_method(user_object, 'equip_weapon', [self]):
    return
  
  if user_object.has_meta('main_attack'):
    Watch.set_object_meta(user_object, 'main_attack', Callable(self, 'attack'))
    return
  
  #class-based composite object
  if not user_object.has_method('run_method'):
    return #not a classic composite object
  
  if user_object.run_method('equip', [self]):
    return
  
  if user_object.run_method('equip_weapon', [self]):
    return
  
  if user_object.has_prop('main_attack'):
    user_object.set_prop('main_attack', [Callable(self, 'attack')])
    return
  












"

[sub_resource type="GDScript" id="GDScript_ps1h6"]
script/source = "extends Node

@export var initial_spd = 10.0

@export var disabled = false

var last_velocity : Vector2


func _enter_tree():
  var parent = get_parent()
  if not ('velocity' in parent):
    push_error('No velocity in parent')
    return
  if not parent.has_method('move_and_slide'):
    push_error('No move_and_slide in parent')
    return
  
  Watch.set_object_meta(parent, 'spd', initial_spd)
  Watch.set_object_meta(parent, 'walk_by', Callable(self, 'walk_by'))


#move in a particular direction, with collisions
func walk_by(vec: Vector2):
  if disabled:
    return

  if (vec.x == 0) and (vec.y == 0):
    return
  
  var parent = get_parent()
  var spd = parent.get_meta('spd')
  parent.velocity += vec * 6.0 * spd
  last_velocity = parent.velocity


func _physics_process(_delta):
  var parent = get_parent()
  if parent.velocity.x == 0 and parent.velocity.y == 0:
    return
  
  parent.move_and_slide()
  parent.velocity = Vector2(0, 0)
"

[sub_resource type="GDScript" id="GDScript_sdq1b"]
script/source = "extends Node

func _physics_process(_delta):
  var parent = get_parent()
  
  var movement_direction = Vector2(0, 0)
  var did_move = false
  if Input.is_action_pressed(\"move_left\"):
    movement_direction += Vector2(-1, 0)
    did_move = true
  if Input.is_action_pressed(\"move_right\"):
    movement_direction += Vector2(1, 0)
    did_move = true
  if Input.is_action_pressed(\"move_up\"):
    movement_direction += Vector2(0, -1)
    did_move = true
  if Input.is_action_pressed(\"move_down\"):
    movement_direction += Vector2(0, 1)
    did_move = true
  
  if did_move:
    Comp.run_method(parent, 'walk_by', [movement_direction.normalized()])
  
"

[sub_resource type="GDScript" id="GDScript_cdtp0"]
script/source = "extends Node

@export var initial_max_hp = 100.0
@export var initial_hp = 100.0
@export var initial_hp_regen = 1.0 #hp / second

@export var initial_mdef = 1.0 #multiplicative defence, divides damage taken
@export var initial_adef = 0.0 #additive defence, subtracts from damage taken up to 0

@export var always_overheal = false
@export var can_overheal = false


func _enter_tree():
  var parent = get_parent()
  
  Watch.set_object_meta(parent, 'hp', initial_hp)
  Watch.set_object_meta(parent, 'max_hp', initial_max_hp)
  Watch.set_object_meta(parent, 'hp_regen', initial_hp_regen)
  Watch.set_object_meta(parent, 'mdef', initial_mdef)
  Watch.set_object_meta(parent, 'adef', initial_adef)
  
  Watch.set_object_meta(parent, 'heal_by', Callable(self, 'heal_by'))
  Watch.set_object_meta(parent, 'overheal_by', Callable(self, 'overheal_by'))
  Watch.set_object_meta(parent, 'hurt_by', Callable(self, 'hurt_by'))


func hurt_by(dmg: float, _dmger: Object):
  var parent = get_parent()
  var hp = parent.get_meta('hp')
  var mdef = parent.get_meta('mdef')
  var adef = parent.get_meta('adef')
  var new_hp = hp - max(0, dmg * mdef - adef)
  Watch.set_object_meta(parent, 'hp', new_hp)


func heal_by(change: float):
  var parent = get_parent()
  var hp = parent.get_meta('hp')
  var max_hp = parent.get_meta('max_hp')
  var new_hp = (hp + change) if always_overheal else min(max_hp, hp + change)
  Watch.set_object_meta(parent, 'hp', new_hp)


func overheal_by(change: float):
  if not can_overheal:
    heal_by(change)
    return
  var parent = get_parent()
  var hp = parent.get_meta('hp')
  var new_hp = hp + change
  Watch.set_object_meta(parent, 'hp', new_hp)












"

[sub_resource type="GDScript" id="GDScript_rfmea"]
script/source = "extends Node


func _enter_tree():
  Watch.set_object_meta(get_parent(), 'can_equip', func(equipment_object):
    var equipment_classes = Comp.get_object_meta(equipment_object, 'equipment_classes')
    if equipment_classes == null:
      return
    for metaname in get_meta_list():
      var index = equipment_classes.find(metaname)
      if index == -1:
        continue
      var count = count_in_class(metaname)
      var max_count = get_meta(metaname)
      prints('equipmentRestrictions', count, max_count)
      return count < max_count
    return true
  )

func _exit_tree():
  Watch.set_object_meta(get_parent(), 'can_equip', null)


func count_in_class(classname: String) -> int:
  var gear_children = Lib.get_children_in_group(get_parent(), 'gear')
  var count = 0
  for gear_child in gear_children:
    var is_equipped = Comp.get_object_meta(gear_child, 'is_equipped', false)
    if not is_equipped:
      continue
    var equipment_classes = Comp.get_object_meta(gear_child, 'equipment_classes')
    if equipment_classes == null:
      continue
    var index = equipment_classes.find(classname) #eg ['armor', 'weapon'].find('armor') != -1
    if index != -1: #classname in equipment_classes
      count += 1
    
  return count

"

[sub_resource type="GDScript" id="GDScript_qvf7r"]
script/source = "extends Node

func _enter_tree():
  var parent = get_parent()
  Watch.call_on_set_meta(parent, 'hp', func():
    var hp = parent.get_meta('hp')
    if hp <= 0:
      if Comp.run_method(parent, 'die', []):
        return
      else:
        parent.queue_free()
  )

"

[sub_resource type="GDScript" id="GDScript_dmgcq"]
script/source = "extends Node2D

var composite

var damage_popup_resource : PackedScene = preload(\"res://damagePopup.tscn\")

var last_hp = 0

func _enter_tree():
  var parent = get_parent()
  Watch.call_on_set_meta(parent, 'hp', func():
    var hp = parent.get_meta('hp')
    var change = hp - last_hp
    if change == 0:
      return
    var damage_popup = damage_popup_resource.instantiate()
    damage_popup.set_damage(change)
    call_deferred('add_child', damage_popup)
    last_hp = hp
  )


func _ready():
  last_hp = get_parent().get_meta('hp')
"

[sub_resource type="GDScript" id="GDScript_kfn3k"]
script/source = "extends Node

var mouse_position_source

func _enter_tree():
  var parent = get_parent()
  if has_method('get_global_mouse_position'):
    mouse_position_source = self
  elif parent.has_method('get_global_mouse_position'):
    mouse_position_source = parent
  else:
    mouse_position_source = Lib.get_parent_with_method(self, 'get_global_mouse_position')
  if not mouse_position_source:
    push_error('No get_global_mouse_position parent found')
    queue_free()
    return
  
  Watch.set_object_meta(parent, 'target_point', Vector2(0, 0))


func _process(_delta):
  Watch.set_object_meta(get_parent(), 'target_point', mouse_position_source.get_global_mouse_position())
"

[sub_resource type="GDScript" id="GDScript_p226j"]
script/source = "extends Node

var character_composite

@export var repeatedly = true
@export var action = 'shoot'

var pressed = false


func _enter_tree():
  var parent = get_parent()
  
  Watch.set_object_meta(parent, 'equip_weapon', Callable(self, \"equip_weapon\"))
  Watch.set_object_meta(parent, 'toggle_weapon_equip', Callable(self, \"equip_weapon\"))
  
  #make sure main_attack group node is highlighted
  var main_attack_node = Lib.get_children_in_group(parent, 'main_attack')
  if main_attack_node.size() >= 1:
    Watch.set_object_meta(main_attack_node[0], 'ui_cell_highlight', true)


func equip_weapon(weapon_node: Node):
  var parent = get_parent()
  
  if weapon_node.is_in_group('main_attack'):
    weapon_node.remove_from_group('main_attack')
    Watch.set_object_meta(weapon_node, 'ui_cell_highlight', false)
    return
  
  #allow only one main_attack group node
  var current_main_attack_nodes = Lib.get_children_in_group(parent, 'main_attack')
  for node in current_main_attack_nodes:
    Watch.remove_child_from_group(parent, node, 'main_attack')
    Watch.set_object_meta(weapon_node, 'ui_cell_highlight', false)
  Watch.add_child_to_group(parent, weapon_node, 'main_attack')
  Watch.set_object_meta(weapon_node, 'ui_cell_highlight', true)


func find_main_attack_abilities_and_attack():
  var parent = get_parent()
  var main_attack_node_list = Lib.get_children_in_group(parent, 'main_attack')
  for attack_node in main_attack_node_list:
    if attack_node.has_method('attack'):
      attack_node.attack(parent)
    elif attack_node.has_method('run_method'): #its a classic composite object
      attack_node.run_method('attack', [parent])
    elif Comp.run_method(parent, 'attack', []): #its a metadata composite object
      return


func _unhandled_input(_event):
  if Input.is_action_just_pressed(action):
    pressed = true
    find_main_attack_abilities_and_attack()


func _input(_event):
  if Input.is_action_just_released(action):
    pressed = false


func _process(_delta):
  if repeatedly and pressed:
    find_main_attack_abilities_and_attack()
"

[sub_resource type="GDScript" id="GDScript_qv40u"]
script/source = "extends Node

var use_count = 0

func _enter_tree():
  print('AAAAAAA')
  set_meta('ui_cell_left_click', Callable(self, 'use_flask'))


func use_flask(user: Object):  
  var health = get_meta('health', 25)
  var max_uses = get_meta('max_uses', 1)
  
  print('use_flask on ', user)
  if user.has_method('call_method'): #is a composite
    user.call_method('heal_by', [health])
  elif user.has_method('heal_by'):
    user.heal_by(health)
  
  use_count += 1
  if (max_uses > -1) and (use_count >= max_uses):
    print('freeing flask')
    queue_free()
"

[sub_resource type="GDScript" id="GDScript_b4sin"]
script/source = "extends Node

@export var cast_speed = 5.0
@export var damage_mod = 1.0

@export var max_attack_rate = 20
@onready var attack_delay = int(float(10000) / float(max_attack_rate))
var next_attack_time = 0

@export var shot_resource : PackedScene


#shoot new shot toward target point / target object with shoot delay
func attack(user_object: Object) -> void:
  var current_time = Time.get_ticks_msec()
  if shot_resource and (next_attack_time < current_time):
    next_attack_time = current_time + attack_delay
    var shot = shot_resource.instantiate()
    
    #set shot origin
    var origin_position = Comp.get_object_meta(user_object, 'shot_origin', null)
    if origin_position == null:
      origin_position = user_object.get_prop('shot_origin') if user_object.has_method('get_prop') else null
    if origin_position == null:
      origin_position = user_object.global_position if ('global_position' in user_object) else null
    if origin_position == null:
      origin_position = Lib.get_parent_with_property(self, 'global_position').global_position
    shot.global_position = origin_position
    
    get_viewport().add_child(shot)
    
    #set shot parent object (the shot's creator)
    Watch.set_object_meta(shot, 'source_object', user_object)
    
    var dmg = shot.get_meta('dmg', 1.0)
    Watch.set_object_meta(shot, 'dmg', dmg * damage_mod)
    
    #try shooting toward target if it exists
    var target_point = Comp.get_object_meta(user_object, 'target_point', null)
    if origin_position == null:
      origin_position = Comp.get_object_meta(user_object, 'target_point') 
    if target_point == null:
      var target_object = Comp.get_object_meta(user_object, 'target_object')
      if target_object != null:
        target_point = target_object.global_position
    
    if target_point != null:
      if Comp.run_method(shot, 'cast_toward', [target_point, cast_speed]):
        return
      elif Comp.run_method(shot, 'shoot_in_dir', [(target_point - origin_position).normalized(), cast_speed]):
        return
      var shot_velocity = shot.get('velocity')
      if (shot_velocity != null) and ('velocity' in shot):
        shot.velocity = (target_point - origin_position).normalized() * cast_speed
        return
      else:
        push_error('Shot has no way of being projected toward target point')
        return
      
    #else, try shooting in a direction
    var shoot_dir = Comp.get_object_meta(user_object, 'shoot_dir')
    if shoot_dir != null:
      shoot_dir = shoot_dir.normalized()
      if Comp.run_method(shot, 'shoot_in_dir', [shoot_dir.normalized(), cast_speed]):
        return
      var shot_velocity = Comp.get_prop(shot, 'shot_velocity')
      if (shot_velocity != null) and ('velocity' in shot):
        shot.velocity = [shoot_dir.normalized() * cast_speed]
        return
      else:
        push_error('Shot has no way of being projected in shoot direction')
        return


func equip(user_object: Object) -> void:
  #direct method calls
  if user_object.has_method('set_main_attack'):
    user_object.set_main_attack(Callable(self, 'attack'))
    return
  
  if user_object.has_method('equip'):
    user_object.equip(self)
    return
  
  if user_object.has_method('equip_weapon'):
    user_object.equip_weapon(self)
    return
  
  #meta composite object
  if Comp.run_method(user_object, 'equip', [self]):
    return
  
  if Comp.run_method(user_object, 'equip_weapon', [self]):
    return
  
  if user_object.has_meta('main_attack'):
    Watch.set_object_meta(user_object, 'main_attack', Callable(self, 'attack'))
    return
  
  #class-based composite object
  if not user_object.has_method('run_method'):
    return #not a classic composite object
  
  if user_object.run_method('equip', [self]):
    return
  
  if user_object.run_method('equip_weapon', [self]):
    return
  
  if user_object.has_prop('main_attack'):
    user_object.set_prop('main_attack', [Callable(self, 'attack')])
    return
  












"

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_1n0gk"]
bg_color = Color(0.6, 0.6, 0.6, 0)

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_7v71u"]
bg_color = Color(1, 0, 0, 1)

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_05hvf"]
bg_color = Color(0.831373, 0, 0.937255, 1)

[sub_resource type="ImageTexture" id="ImageTexture_732q5"]

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_jwqyk"]

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_n52om"]

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_nosgv"]

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_o4e32"]

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_q43u3"]

[sub_resource type="Theme" id="Theme_w7m20"]
HScrollBar/icons/decrement = SubResource("ImageTexture_732q5")
HScrollBar/icons/decrement_highlight = SubResource("ImageTexture_732q5")
HScrollBar/icons/decrement_pressed = SubResource("ImageTexture_732q5")
HScrollBar/icons/increment = SubResource("ImageTexture_732q5")
HScrollBar/icons/increment_highlight = SubResource("ImageTexture_732q5")
HScrollBar/icons/increment_pressed = SubResource("ImageTexture_732q5")
HScrollBar/styles/grabber = SubResource("StyleBoxEmpty_jwqyk")
HScrollBar/styles/grabber_highlight = SubResource("StyleBoxEmpty_n52om")
HScrollBar/styles/grabber_pressed = SubResource("StyleBoxEmpty_nosgv")
HScrollBar/styles/scroll = SubResource("StyleBoxEmpty_o4e32")
HScrollBar/styles/scroll_focus = SubResource("StyleBoxEmpty_q43u3")

[sub_resource type="GDScript" id="GDScript_xoef0"]
script/source = "extends Node

var gear_cell_resource : PackedScene = preload(\"res://ui/uiGearCell.tscn\")

var parent_character

func _enter_tree():
  parent_character = Lib.get_parent_in_group(self, \"character\")
  if parent_character == null:
    push_error('No character parent found')
    return
  
  parent_character.connect('child_entered_tree', Callable(self, 'on_new_character_child'))


func _ready():
  #make some empty cells on idle
  (func():
    var max_cell_count = Comp.get_object_meta(parent_character, 'ui_gear_cells', 24)
    for i in range(0, max_cell_count):
      var new_gear_cell = gear_cell_resource.instantiate()
#      call_deferred('add_sibling', new_gear_cell)
      add_sibling(new_gear_cell)
    
    #add existing children to cells
    for char_child in parent_character.get_children():
      if not char_child.is_in_group('gear'):
        continue
      on_new_character_child(char_child)
  ).call_deferred()


func on_new_character_child(char_child: Node):
  if not char_child.is_in_group('gear'):
    return
  var first_empty_cell = find_first_empty_cell()
  if first_empty_cell != null:
    first_empty_cell.set_gear_node(char_child)


func find_first_empty_cell():
  for sibling_or_self in get_parent().get_children():
    print(sibling_or_self)
    if not sibling_or_self.has_method('is_empty'):
      continue #sibling_or_self == self
    if sibling_or_self.is_empty():
      return sibling_or_self
  return null
"

[sub_resource type="GDScript" id="GDScript_8ikdp"]
script/source = "extends Node

var gear_cell_resource : PackedScene = preload(\"res://ui/uiGearCell.tscn\")

var parent_character

func _enter_tree():
  parent_character = Lib.get_parent_in_group(self, \"character\")
  if parent_character == null:
    push_error('No character parent found')
    return
  
  parent_character.connect('child_entered_tree', Callable(self, 'on_new_character_child'))


func _ready():
  #make some empty cells on idle
  (func():
    var max_cell_count = Comp.get_object_meta(parent_character, 'ui_gear_cells', 24)
    for i in range(0, max_cell_count):
      var new_gear_cell = gear_cell_resource.instantiate()
      add_sibling(new_gear_cell)
    
    #add existing children to cells
    for char_child in parent_character.get_children():
      if not char_child.is_in_group('gear'):
        continue
      on_new_character_child(char_child)
  ).call_deferred()


func on_new_character_child(char_child: Node):
  if not char_child.is_in_group('gear'):
    return
  var first_empty_cell = find_first_empty_cell()
  if first_empty_cell != null:
    first_empty_cell.set_gear_node(char_child)


func find_first_empty_cell():
  for sibling_or_self in get_parent().get_children():
    if not sibling_or_self.has_method('is_empty'):
      continue #sibling_or_self == self
    if sibling_or_self.is_empty():
      return sibling_or_self
  return null
"

[sub_resource type="GDScript" id="GDScript_e5osu"]
script/source = "extends Node2D

func _enter_tree():
  Lib.mouse_canvas_item = self

func _exit_tree():
  Lib.mouse_canvas_item = null

"

[sub_resource type="GDScript" id="GDScript_ouy83"]
script/source = "extends Node

@export var initial_spd = 10.0

@export var disabled = false

var last_velocity : Vector2


func _enter_tree():
  var parent = get_parent()
  if not ('velocity' in parent):
    push_error('No velocity in parent')
    return
  if not parent.has_method('move_and_slide'):
    push_error('No move_and_slide in parent')
    return
  
  Watch.set_object_meta(parent, 'spd', initial_spd)
  Watch.set_object_meta(parent, 'walk_by', Callable(self, 'walk_by'))


#move in a particular direction, with collisions
func walk_by(vec: Vector2):
  if disabled:
    return

  if (vec.x == 0) and (vec.y == 0):
    return
  
  var parent = get_parent()
  var spd = parent.get_meta('spd')
  parent.velocity += vec * 6.0 * spd
  last_velocity = parent.velocity


func _physics_process(_delta):
  var parent = get_parent()
  if parent.velocity.x == 0 and parent.velocity.y == 0:
    return
  
  parent.move_and_slide()
  parent.velocity = Vector2(0, 0)
"

[sub_resource type="GDScript" id="GDScript_oq6s2"]
script/source = "extends Node

func _physics_process(_delta):
  var parent = get_parent()
  
  var movement_direction = Vector2(0, 0)
  var did_move = false
  if Input.is_action_pressed(\"move_left\"):
    movement_direction += Vector2(-1, 0)
    did_move = true
  if Input.is_action_pressed(\"move_right\"):
    movement_direction += Vector2(1, 0)
    did_move = true
  if Input.is_action_pressed(\"move_up\"):
    movement_direction += Vector2(0, -1)
    did_move = true
  if Input.is_action_pressed(\"move_down\"):
    movement_direction += Vector2(0, 1)
    did_move = true
  
  if did_move:
    Comp.run_method(parent, 'walk_by', [movement_direction.normalized()])
  
"

[sub_resource type="GDScript" id="GDScript_3d0ug"]
script/source = "extends Node

@export var initial_max_hp = 100.0
@export var initial_hp = 100.0
@export var initial_hp_regen = 1.0 #hp / second

@export var initial_mdef = 1.0 #multiplicative defence, divides damage taken
@export var initial_adef = 0.0 #additive defence, subtracts from damage taken up to 0

@export var always_overheal = false
@export var can_overheal = false


func _enter_tree():
  var parent = get_parent()
  
  Watch.set_object_meta(parent, 'hp', initial_hp)
  Watch.set_object_meta(parent, 'max_hp', initial_max_hp)
  Watch.set_object_meta(parent, 'hp_regen', initial_hp_regen)
  Watch.set_object_meta(parent, 'mdef', initial_mdef)
  Watch.set_object_meta(parent, 'adef', initial_adef)
  
  Watch.set_object_meta(parent, 'heal_by', Callable(self, 'heal_by'))
  Watch.set_object_meta(parent, 'overheal_by', Callable(self, 'overheal_by'))
  Watch.set_object_meta(parent, 'hurt_by', Callable(self, 'hurt_by'))


func hurt_by(dmg: float, _dmger: Object):
  var parent = get_parent()
  var hp = parent.get_meta('hp')
  var mdef = parent.get_meta('mdef')
  var adef = parent.get_meta('adef')
  var new_hp = hp - max(0, dmg * mdef - adef)
  Watch.set_object_meta(parent, 'hp', new_hp)


func heal_by(change: float):
  var parent = get_parent()
  var hp = parent.get_meta('hp')
  var max_hp = parent.get_meta('max_hp')
  var new_hp = (hp + change) if always_overheal else min(max_hp, hp + change)
  Watch.set_object_meta(parent, 'hp', new_hp)


func overheal_by(change: float):
  if not can_overheal:
    heal_by(change)
    return
  var parent = get_parent()
  var hp = parent.get_meta('hp')
  var new_hp = hp + change
  Watch.set_object_meta(parent, 'hp', new_hp)












"

[sub_resource type="GDScript" id="GDScript_653t2"]
script/source = "extends Node


func _enter_tree():
  Watch.set_object_meta(get_parent(), 'can_equip', func(equipment_object):
    var equipment_classes = Comp.get_object_meta(equipment_object, 'equipment_classes')
    if equipment_classes == null:
      return
    for metaname in get_meta_list():
      var index = equipment_classes.find(metaname)
      if index == -1:
        continue
      var count = count_in_class(metaname)
      var max_count = get_meta(metaname)
      prints('equipmentRestrictions', count, max_count)
      return count < max_count
    return true
  )

func _exit_tree():
  Watch.set_object_meta(get_parent(), 'can_equip', null)


func count_in_class(classname: String) -> int:
  var gear_children = Lib.get_children_in_group(get_parent(), 'gear')
  var count = 0
  for gear_child in gear_children:
    var is_equipped = Comp.get_object_meta(gear_child, 'is_equipped', false)
    if not is_equipped:
      continue
    var equipment_classes = Comp.get_object_meta(gear_child, 'equipment_classes')
    if equipment_classes == null:
      continue
    var index = equipment_classes.find(classname) #eg ['armor', 'weapon'].find('armor') != -1
    if index != -1: #classname in equipment_classes
      count += 1
    
  return count

"

[sub_resource type="GDScript" id="GDScript_rjo0x"]
script/source = "extends Node

func _enter_tree():
  var parent = get_parent()
  Watch.call_on_set_meta(parent, 'hp', func():
    var hp = parent.get_meta('hp')
    if hp <= 0:
      if Comp.run_method(parent, 'die', []):
        return
      else:
        parent.queue_free()
  )

"

[sub_resource type="GDScript" id="GDScript_2tpsa"]
script/source = "extends Node2D

var composite

var damage_popup_resource : PackedScene = preload(\"res://damagePopup.tscn\")

var last_hp = 0

func _enter_tree():
  var parent = get_parent()
  Watch.call_on_set_meta(parent, 'hp', func():
    var hp = parent.get_meta('hp')
    var change = hp - last_hp
    if change == 0:
      return
    var damage_popup = damage_popup_resource.instantiate()
    damage_popup.set_damage(change)
    call_deferred('add_child', damage_popup)
    last_hp = hp
  )


func _ready():
  last_hp = get_parent().get_meta('hp')
"

[sub_resource type="GDScript" id="GDScript_7thw1"]
script/source = "extends Node

var mouse_position_source

func _enter_tree():
  var parent = get_parent()
  if has_method('get_global_mouse_position'):
    mouse_position_source = self
  elif parent.has_method('get_global_mouse_position'):
    mouse_position_source = parent
  else:
    mouse_position_source = Lib.get_parent_with_method(self, 'get_global_mouse_position')
  if not mouse_position_source:
    push_error('No get_global_mouse_position parent found')
    queue_free()
    return
  
  Watch.set_object_meta(parent, 'target_point', Vector2(0, 0))


func _process(_delta):
  Watch.set_object_meta(get_parent(), 'target_point', mouse_position_source.get_global_mouse_position())
"

[sub_resource type="GDScript" id="GDScript_wul5y"]
script/source = "extends Node

var character_composite

@export var repeatedly = true
@export var action = 'shoot'

var pressed = false


func _enter_tree():
  var parent = get_parent()
  
  Watch.set_object_meta(parent, 'equip_weapon', Callable(self, \"equip_weapon\"))
  Watch.set_object_meta(parent, 'toggle_weapon_equip', Callable(self, \"equip_weapon\"))
  
  #make sure main_attack group node is highlighted
  var main_attack_node = Lib.get_children_in_group(parent, 'main_attack')
  if main_attack_node.size() >= 1:
    Watch.set_object_meta(main_attack_node[0], 'ui_cell_highlight', true)


func equip_weapon(weapon_node: Node):
  var parent = get_parent()
  
  if weapon_node.is_in_group('main_attack'):
    weapon_node.remove_from_group('main_attack')
    Watch.set_object_meta(weapon_node, 'ui_cell_highlight', false)
    return
  
  #allow only one main_attack group node
  var current_main_attack_nodes = Lib.get_children_in_group(parent, 'main_attack')
  for node in current_main_attack_nodes:
    Watch.remove_child_from_group(parent, node, 'main_attack')
    Watch.set_object_meta(weapon_node, 'ui_cell_highlight', false)
  Watch.add_child_to_group(parent, weapon_node, 'main_attack')
  Watch.set_object_meta(weapon_node, 'ui_cell_highlight', true)


func find_main_attack_abilities_and_attack():
  var parent = get_parent()
  var main_attack_node_list = Lib.get_children_in_group(parent, 'main_attack')
  for attack_node in main_attack_node_list:
    if attack_node.has_method('attack'):
      attack_node.attack(parent)
    elif attack_node.has_method('run_method'): #its a classic composite object
      attack_node.run_method('attack', [parent])
    elif Comp.run_method(parent, 'attack', []): #its a metadata composite object
      return


func _unhandled_input(_event):
  if Input.is_action_just_pressed(action):
    pressed = true
    find_main_attack_abilities_and_attack()


func _input(_event):
  if Input.is_action_just_released(action):
    pressed = false


func _process(_delta):
  if repeatedly and pressed:
    find_main_attack_abilities_and_attack()
"

[sub_resource type="GDScript" id="GDScript_2qfgs"]
script/source = "extends Node

var use_count = 0

func _enter_tree():
  set_meta('ui_cell_left_click', Callable(self, 'use_flask'))


func use_flask(user: Object):  
  var health = get_meta('health', 25)
  var max_uses = get_meta('max_uses', 1)
  
  print('use_flask on ', user)
  if user.has_method('call_method'): #is a composite
    user.call_method('heal_by', [health])
  elif user.has_method('heal_by'):
    user.heal_by(health)
  
  use_count += 1
  if (max_uses > -1) and (use_count >= max_uses):
    print('freeing flask')
    queue_free()
"

[sub_resource type="GDScript" id="GDScript_gdc7a"]
script/source = "extends Node

@export var cast_speed = 5.0
@export var damage_mod = 1.0

@export var max_attack_rate = 20
@onready var attack_delay = int(float(10000) / float(max_attack_rate))
var next_attack_time = 0

@export var shot_resource : PackedScene


#shoot new shot toward target point / target object with shoot delay
func attack(user_object: Object) -> void:
  var current_time = Time.get_ticks_msec()
  if shot_resource and (next_attack_time < current_time):
    next_attack_time = current_time + attack_delay
    var shot = shot_resource.instantiate()
    
    #set shot origin
    var origin_position = Comp.get_object_meta(user_object, 'shot_origin', null)
    if origin_position == null:
      origin_position = user_object.get_prop('shot_origin') if user_object.has_method('get_prop') else null
    if origin_position == null:
      origin_position = user_object.global_position if ('global_position' in user_object) else null
    if origin_position == null:
      origin_position = Lib.get_parent_with_property(self, 'global_position').global_position
    shot.global_position = origin_position
    
    get_viewport().add_child(shot)
    
    #set shot parent object (the shot's creator)
    Watch.set_object_meta(shot, 'source_object', user_object)
    
    var dmg = shot.get_meta('dmg', 1.0)
    Watch.set_object_meta(shot, 'dmg', dmg * damage_mod)
    
    #try shooting toward target if it exists
    var target_point = Comp.get_object_meta(user_object, 'target_point', null)
    if origin_position == null:
      origin_position = Comp.get_object_meta(user_object, 'target_point') 
    if target_point == null:
      var target_object = Comp.get_object_meta(user_object, 'target_object')
      if target_object != null:
        target_point = target_object.global_position
    
    if target_point != null:
      if Comp.run_method(shot, 'cast_toward', [target_point, cast_speed]):
        return
      elif Comp.run_method(shot, 'shoot_in_dir', [(target_point - origin_position).normalized(), cast_speed]):
        return
      var shot_velocity = shot.get('velocity')
      if (shot_velocity != null) and ('velocity' in shot):
        shot.velocity = (target_point - origin_position).normalized() * cast_speed
        return
      else:
        push_error('Shot has no way of being projected toward target point')
        return
      
    #else, try shooting in a direction
    var shoot_dir = Comp.get_object_meta(user_object, 'shoot_dir')
    if shoot_dir != null:
      shoot_dir = shoot_dir.normalized()
      if Comp.run_method(shot, 'shoot_in_dir', [shoot_dir.normalized(), cast_speed]):
        return
      var shot_velocity = Comp.get_prop(shot, 'shot_velocity')
      if (shot_velocity != null) and ('velocity' in shot):
        shot.velocity = [shoot_dir.normalized() * cast_speed]
        return
      else:
        push_error('Shot has no way of being projected in shoot direction')
        return


func equip(user_object: Object) -> void:
  #direct method calls
  if user_object.has_method('set_main_attack'):
    user_object.set_main_attack(Callable(self, 'attack'))
    return
  
  if user_object.has_method('equip'):
    user_object.equip(self)
    return
  
  if user_object.has_method('equip_weapon'):
    user_object.equip_weapon(self)
    return
  
  #meta composite object
  if Comp.run_method(user_object, 'equip', [self]):
    return
  
  if Comp.run_method(user_object, 'equip_weapon', [self]):
    return
  
  if user_object.has_meta('main_attack'):
    Watch.set_object_meta(user_object, 'main_attack', Callable(self, 'attack'))
    return
  
  #class-based composite object
  if not user_object.has_method('run_method'):
    return #not a classic composite object
  
  if user_object.run_method('equip', [self]):
    return
  
  if user_object.run_method('equip_weapon', [self]):
    return
  
  if user_object.has_prop('main_attack'):
    user_object.set_prop('main_attack', [Callable(self, 'attack')])
    return
  












"

[sub_resource type="GDScript" id="GDScript_xubqq"]
script/source = "extends Node


func _init():
  Watch.call_on_notify(Watch.ui_notifier, 'ui_cell_input', Callable(self, 'on_control_input'))


func on_control_input(control: Control, event: InputEvent):
  if not (event is InputEventMouseButton):
    return
  
  if event.button_index != MOUSE_BUTTON_LEFT:
    return
  
  if not event.shift_pressed:
    return
  
  #we only care about ui gear cells
  if not control.is_in_group('ui_gear_cell'):
    return
  
  if control.gear_node == null:
    return
  
  var my_parent = get_parent()
  control.gear_node.reparent(my_parent)
  
"

[sub_resource type="GDScript" id="GDScript_jokbh"]
script/source = "extends Node


func _init():
  Watch.call_on_notify(Watch.ui_notifier, 'ui_cell_input', on_cell_input)


func on_cell_input(control: Control, event: InputEvent):
  if not (event is InputEventMouseButton):
    return
  
  #we only care about ui gear cells
  if not control.is_in_group('ui_gear_cell'):
    return
  
  var gear_node = control.gear_node
  if gear_node == null:
    return
  
  var parent = get_parent()
  if (gear_node == null) or (parent == null):
    return
  
  #we only trigger on button release
  if event.pressed:
    return
  prints('pressed')
  
  var mouse_button_name = ''
  match event.button_index:
    MOUSE_BUTTON_LEFT: mouse_button_name = '_left_click'
    MOUSE_BUTTON_RIGHT: mouse_button_name = '_right_click'
    MOUSE_BUTTON_MIDDLE: mouse_button_name = '_middle_click'
  
  var modifier_name = ''
  if event.shift_pressed:
    modifier_name = '_shift'
  elif event.ctrl_pressed:
    modifier_name = '_ctrl'
  elif event.alt_pressed:
    modifier_name = '_alt'
  
  var metadata_prop_name = ('ui_cell' + 
      modifier_name +
      mouse_button_name + 
      ('_double_click' if event.double_click else ''))
  var use_method = Comp.get_object_meta(gear_node, metadata_prop_name)
  if use_method == null:
    return
  
  if use_method is Callable:
    use_method.call(parent)
  elif gear_node.has_method(use_method):
    gear_node.call(use_method, parent)
  elif gear_node.has_method('run_method') and gear_node.run_method(use_method, [parent]):
    return
  else:
    push_error('ability method ', use_method,' uncallable')
    return #not method called
  
"

[sub_resource type="GDScript" id="GDScript_25vtd"]
script/source = "extends Node

func _enter_tree():
  get_parent().child_exiting_tree.connect(on_child_removed)


func on_child_removed(child: Node):
  if not child.is_in_group('gear'):
    return
  
  var parent = get_parent()
  
  var use_method = Comp.get_object_meta(child, 'gear_removed')
  if use_method == null:
    return
  
  if use_method is Callable:
    use_method.call(parent)
  elif child.has_method(use_method):
    child.call(use_method, parent)
  elif child.has_method('run_method') and child.run_method(use_method, [parent]):
    return
  else:
    push_error('ability method ', use_method,' uncallable')
    return #not method called
"

[sub_resource type="GDScript" id="GDScript_phvdr"]
script/source = "extends Node

func _init():
  Watch.call_on_notify(Watch.ui_notifier, 'container_body_input', Callable(self, 'on_container_body_input'))


func on_container_body_input(control, event):
  if control == null:
    return
  if not (event is InputEventMouseButton):
    return
  
  if event.button_index != MOUSE_BUTTON_LEFT:
    return
  
  #only on released
  if event.pressed:
    return
  
  var parent_container = Lib.get_parent_in_group(control, 'container')
  if parent_container == null:
    return
  
  if Comp.run_method(parent_container, 'toggle_display', []):
    return
  elif parent_container.has_method('toggle_display'):
    parent_container.toggle_display()
    return
  
  var inventory_display = parent_container.get_node('inventoryDisplay')
  if inventory_display != null:
    inventory_display.visible = not inventory_display.visible
    return
  
  push_error('No way to toggle containers inventory visibility')
"

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_6wdf5"]
bg_color = Color(0.6, 0.6, 0.6, 0)

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_mlumg"]
bg_color = Color(1, 0, 0, 1)

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_wys0v"]
bg_color = Color(0.831373, 0, 0.937255, 1)

[sub_resource type="GDScript" id="GDScript_7sb68"]
script/source = "extends Node


func _on_ui_control_tree_entered():
  var parent = get_node('../../../../') #uiControl parent
  Watch.set_object_meta(parent, 'add_gear_ui_cell', add_gear_ui_cell)
func _on_ui_control_tree_exited():
  var parent = get_node('../../../../') #uiControl parent
  Watch.set_object_meta(parent, 'add_gear_ui_cell', null)


func add_gear_ui_cell(gear_cell_node) -> bool:
  if gear_cell_node == null:
    return false
  
  #now add gear_cell_node to an empty cell, if one exists
  var cell_container = get_parent().get_node('MarginContainer/ScrollContainer/HBoxContainer')
  for cell_node in cell_container.get_children():
    if cell_node.get_child_count() != 0:
      continue #ignore non-empty cells
    
    cell_node.add_child(gear_cell_node)
  
  return false #no suitable empty cell found
"

[sub_resource type="ImageTexture" id="ImageTexture_d2404"]

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_2yx5m"]

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_i3mre"]

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_ry7i4"]

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_au8de"]

[sub_resource type="StyleBoxEmpty" id="StyleBoxEmpty_t1yes"]

[sub_resource type="Theme" id="Theme_s5dwc"]
HScrollBar/icons/decrement = SubResource("ImageTexture_d2404")
HScrollBar/icons/decrement_highlight = SubResource("ImageTexture_d2404")
HScrollBar/icons/decrement_pressed = SubResource("ImageTexture_d2404")
HScrollBar/icons/increment = SubResource("ImageTexture_d2404")
HScrollBar/icons/increment_highlight = SubResource("ImageTexture_d2404")
HScrollBar/icons/increment_pressed = SubResource("ImageTexture_d2404")
HScrollBar/styles/grabber = SubResource("StyleBoxEmpty_2yx5m")
HScrollBar/styles/grabber_highlight = SubResource("StyleBoxEmpty_i3mre")
HScrollBar/styles/grabber_pressed = SubResource("StyleBoxEmpty_ry7i4")
HScrollBar/styles/scroll = SubResource("StyleBoxEmpty_au8de")
HScrollBar/styles/scroll_focus = SubResource("StyleBoxEmpty_t1yes")

[sub_resource type="GDScript" id="GDScript_tieds"]
script/source = "extends Node


func _init():
  Watch.call_on_notify(Watch.ui_notifier, 'ui_cell_input', Callable(self, 'on_control_input'))


func on_control_input(control: Control, event: InputEvent):
  if not (event is InputEventMouseButton):
    return
  
  if event.button_index != MOUSE_BUTTON_LEFT:
    return
  
  if not event.shift_pressed:
    return
  
  #we only care about ui gear cells
  if not control.is_in_group('ui_gear_cell'):
    return
  
  if control.gear_node == null:
    return
  
  var my_parent = get_parent()
  control.gear_node.reparent(my_parent)
  
"

[sub_resource type="GDScript" id="GDScript_olo35"]
script/source = "extends Node


func _init():
  Watch.call_on_notify(Watch.ui_notifier, 'ui_cell_input', on_cell_input)


func on_cell_input(control: Control, event: InputEvent):
  if not (event is InputEventMouseButton):
    return
  
  #we only care about ui gear cells
  if not control.is_in_group('ui_gear_cell'):
    return
  
  var gear_node = control.gear_node
  if gear_node == null:
    return
  
  var parent = get_parent()
  if (gear_node == null) or (parent == null):
    return
  
  #we only trigger on button release
  if event.pressed:
    return
  prints('pressed')
  
  var mouse_button_name = ''
  match event.button_index:
    MOUSE_BUTTON_LEFT: mouse_button_name = '_left_click'
    MOUSE_BUTTON_RIGHT: mouse_button_name = '_right_click'
    MOUSE_BUTTON_MIDDLE: mouse_button_name = '_middle_click'
  
  var modifier_name = ''
  if event.shift_pressed:
    modifier_name = '_shift'
  elif event.ctrl_pressed:
    modifier_name = '_ctrl'
  elif event.alt_pressed:
    modifier_name = '_alt'
  
  var metadata_prop_name = ('ui_cell' + 
      modifier_name +
      mouse_button_name + 
      ('_double_click' if event.double_click else ''))
  var use_method = Comp.get_object_meta(gear_node, metadata_prop_name)
  if use_method == null:
    return
  
  if use_method is Callable:
    use_method.call(parent)
  elif gear_node.has_method(use_method):
    gear_node.call(use_method, parent)
  elif gear_node.has_method('run_method') and gear_node.run_method(use_method, [parent]):
    return
  else:
    push_error('ability method ', use_method,' uncallable')
    return #not method called
  
"

[sub_resource type="GDScript" id="GDScript_dqj6j"]
script/source = "extends Node

func _enter_tree():
  get_parent().child_exiting_tree.connect(on_child_removed)


func on_child_removed(child: Node):
  if not child.is_in_group('gear'):
    return
  
  var parent = get_parent()
  
  var use_method = Comp.get_object_meta(child, 'gear_removed')
  if use_method == null:
    return
  
  if use_method is Callable:
    use_method.call(parent)
  elif child.has_method(use_method):
    child.call(use_method, parent)
  elif child.has_method('run_method') and child.run_method(use_method, [parent]):
    return
  else:
    push_error('ability method ', use_method,' uncallable')
    return #not method called
"

[sub_resource type="GDScript" id="GDScript_vjjkb"]
script/source = "extends Node

func _init():
  Watch.call_on_notify(Watch.ui_notifier, 'container_body_input', Callable(self, 'on_container_body_input'))


func on_container_body_input(control, event):
  if control == null:
    return
  if not (event is InputEventMouseButton):
    return
  
  if event.button_index != MOUSE_BUTTON_LEFT:
    return
  
  #only on released
  if event.pressed:
    return
  
  var parent_container = Lib.get_parent_in_group(control, 'container')
  if parent_container == null:
    return
  
  if Comp.run_method(parent_container, 'toggle_display', []):
    return
  elif parent_container.has_method('toggle_display'):
    parent_container.toggle_display()
    return
  
  var inventory_display = parent_container.get_node('inventoryDisplay')
  if inventory_display != null:
    inventory_display.visible = not inventory_display.visible
    return
  
  push_error('No way to toggle containers inventory visibility')
"

[sub_resource type="GDScript" id="GDScript_cmjwb"]
script/source = "extends Area2D

func on_direct_mouse_event(event: InputEventMouse):
  if not (event is InputEventMouseButton):
    return
  Watch.notify(Watch.ui_notifier, 'container_body_input', [self, event])
"

[sub_resource type="RectangleShape2D" id="RectangleShape2D_pqmp8"]
size = Vector2(6, 6)

[sub_resource type="GDScript" id="GDScript_gpgj4"]
script/source = "extends Node

func _enter_tree():
  var parent = get_parent() as Sprite2D
  var noisemask = parent.material.get_shader_parameter(\"noisemask\")
  noisemask.noise.seed = randi()
  prints('lavaDecoration.randomizeNoiseSeed', noisemask.noise.seed)
  
"

[sub_resource type="GDScript" id="GDScript_u8d6p"]
script/source = "extends Node

@export_dir var directory: String

func _enter_tree():
  if directory == '':
    push_error('No directory given')
    return
  
  var dir_access = DirAccess.open(directory)
  var file_list = []
  for possible_file in dir_access.get_files():
    if possible_file.ends_with('png') or possible_file.ends_with('jpg') or possible_file.ends_with('jpeg'):
      file_list.push_back(possible_file)
  var file = Lib.pick_random_from(file_list)
  if file == null:
    push_error('No files found to select from')
    return
  
  var file_image
  var file_resource = load(directory + '/' + file)
  if file_resource is Texture2D:
    file_image = file_resource.get_image()
  elif file_resource is Image:
    file_image = file_resource
  else:
    push_error('File resource type is unrecognized ', file_resource)
    return
  
  var parent = get_parent()
  var parent_image = parent.texture.get_image()
  
  if parent_image.get_size() != file_image.get_size():
    push_error('Mask size doesnt match parent image size')
    return
  
  for i in range(0, parent_image.get_width()):
    for j in range(0, parent_image.get_height()):
      var file_color = file_image.get_pixel(i, j)
      var parent_color = parent_image.get_pixel(i, j)
      parent_image.set_pixel(i, j, Color(parent_color.r, parent_color.g, parent_color.b, file_color.r * parent_color.a))
  
  parent.texture.set_data(parent_image)

"

[sub_resource type="RectangleShape2D" id="RectangleShape2D_2bdni"]
size = Vector2(12, 8)

[sub_resource type="GDScript" id="GDScript_buqvs"]
script/source = "extends Node


func _enter_tree():
  var parent = get_parent()
  parent.body_entered.connect(on_body_entered)
  parent.body_exited.connect(on_body_exited)


func _exit_tree():
  var parent = get_parent()
  parent.body_entered.disconnect(on_body_entered)
  parent.body_exited.disconnect(on_body_exited)


func on_body_entered(body: Node2D):
  prints('reportWhenTouched.. entered')


func on_body_exited(body: Node2D):
  prints('reportWhenTouched.. exited')

"

[sub_resource type="GDScript" id="GDScript_lsl0m"]
script/source = "extends Node

var container: Container
var parent: Viewport


func _ready():
  container = Lib.get_parent_with_class(self, 'Container')
  container.resized.connect(on_resized)
  on_resized()


func on_resized():
  get_parent().size = container.size
"

[sub_resource type="RectangleShape2D" id="RectangleShape2D_p5y2b"]
size = Vector2(6, 6)

[node name="saved_nodes" type="Node"]

[node name="genericAdventurer1" parent="." instance=ExtResource("1_mg3gl")]
visible = false
metadata/ui_gear_cells = 3

[node name="hpPot" type="Sprite2D" parent="genericAdventurer1" groups=["gear"]]
visible = false
texture = ExtResource("2_0f1mu")
script = ExtResource("3_akax0")
metadata/ui_cell_display = ExtResource("2_0f1mu")
metadata/ui_cell_left_click = "use_flask"

[node name="hpFlaskAbility" type="Node" parent="genericAdventurer1/hpPot"]
script = ExtResource("4_toscw")

[node name="walkAbility" type="Node" parent="genericAdventurer1"]
script = ExtResource("5_4jc16")

[node name="moveCharacterOnAction" type="Node" parent="genericAdventurer1/walkAbility"]
script = ExtResource("6_gwncv")

[node name="healthStats" type="Node" parent="genericAdventurer1"]
script = ExtResource("7_fj1jy")
max_hp = 1000.0
hp = 500.0

[node name="dieOnZeroHp" type="Node" parent="genericAdventurer1/healthStats"]
script = ExtResource("8_50eih")

[node name="inSingleFaction" type="Node" parent="genericAdventurer1"]
script = ExtResource("9_gbaly")
faction = "players"

[node name="shootOnAction" type="Node" parent="genericAdventurer1"]
script = ExtResource("10_8sge6")

[node name="setCharacterTargetToMouseLocation" type="Node" parent="genericAdventurer1"]
script = ExtResource("11_jx7sd")

[node name="basicSword" type="Sprite2D" parent="genericAdventurer1" groups=["gear", "main_attack"]]
z_index = 1
texture_filter = 1
position = Vector2(4, 0)
texture = ExtResource("12_42agh")
script = ExtResource("3_akax0")
metadata/ui_cell_display = ExtResource("12_42agh")

[node name="basicWeaponAttackAbility" type="Node" parent="genericAdventurer1/basicSword" groups=["ability"]]
script = ExtResource("13_o27i6")
cast_speed = 80.0
max_attack_rate = 40
shot_resource = ExtResource("14_6fypr")

[node name="makeBasicDamagePopups" type="Node2D" parent="genericAdventurer1"]
position = Vector2(0, -8)
script = ExtResource("15_44pn0")

[node name="characterInventory" type="Node" parent="genericAdventurer1" groups=["inventory"]]
metadata/size = 6

[node name="testItem" type="Sprite2D" parent="genericAdventurer1/characterInventory"]
visible = false
texture_filter = 1
texture = ExtResource("2_0f1mu")

[node name="Camera2D" type="Camera2D" parent="genericAdventurer1"]
zoom = Vector2(4, 4)

[node name="uiControl" type="Control" parent="genericAdventurer1"]
z_index = 1000
z_as_relative = false
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
offset_left = -138.0
offset_top = -76.0
offset_right = 136.681
offset_bottom = 74.486
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 1

[node name="bottomBar" type="HBoxContainer" parent="genericAdventurer1/uiControl"]
custom_minimum_size = Vector2(0, 13)
layout_mode = 1
anchors_preset = 12
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
offset_left = 2.0
offset_top = -10.486
offset_right = 2.00003
offset_bottom = 1.51401
grow_horizontal = 2
grow_vertical = 0
mouse_filter = 0
theme_override_constants/separation = 0

[node name="hpMpBar" type="NinePatchRect" parent="genericAdventurer1/uiControl/bottomBar"]
texture_filter = 1
custom_minimum_size = Vector2(82, 0)
layout_mode = 2
texture = ExtResource("16_6nese")
region_rect = Rect2(1, 1, 6, 6)
patch_margin_left = 2
patch_margin_top = 2
patch_margin_right = 2
patch_margin_bottom = 2
axis_stretch_horizontal = 1
axis_stretch_vertical = 1

[node name="expanderButton" type="TextureButton" parent="genericAdventurer1/uiControl/bottomBar/hpMpBar"]
custom_minimum_size = Vector2(8, 8)
layout_mode = 1
anchors_preset = 4
anchor_top = 0.5
anchor_bottom = 0.5
offset_top = -6.0
offset_right = 12.0
offset_bottom = 6.0
grow_vertical = 2
toggle_mode = true
texture_normal = ExtResource("17_c6xje")
stretch_mode = 5

[node name="hpBar" type="ProgressBar" parent="genericAdventurer1/uiControl/bottomBar/hpMpBar"]
layout_mode = 0
offset_left = 11.3419
offset_top = 1.96497
offset_right = 149.342
offset_bottom = 41.965
scale = Vector2(0.224581, 0.224581)
theme_override_colors/font_color = Color(0.52549, 0, 0.0666667, 1)
theme_override_font_sizes/font_size = 28
theme_override_styles/background = SubResource("StyleBoxFlat_tsxmw")
theme_override_styles/fill = SubResource("StyleBoxFlat_12e5e")
value = 100.0

[node name="syncRangeToCharacterStat" type="Node" parent="genericAdventurer1/uiControl/bottomBar/hpMpBar/hpBar"]
script = ExtResource("18_5cse6")
max_stat = "max_hp"

[node name="hpBackground" type="NinePatchRect" parent="genericAdventurer1/uiControl/bottomBar/hpMpBar"]
layout_mode = 0
offset_left = 11.3419
offset_top = 1.96497
offset_right = 42.3419
offset_bottom = 10.965
texture = ExtResource("19_trqbl")
region_rect = Rect2(0, 0, 16, 10)
patch_margin_left = 6
patch_margin_top = 3
patch_margin_right = 6
patch_margin_bottom = 3

[node name="mpBar" type="Control" parent="genericAdventurer1/uiControl/bottomBar/hpMpBar"]
anchors_preset = 0
offset_left = 43.0
offset_top = 2.0
offset_right = 79.0
offset_bottom = 11.0

[node name="mpBackground" type="NinePatchRect" parent="genericAdventurer1/uiControl/bottomBar/hpMpBar/mpBar"]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
texture = ExtResource("19_trqbl")
region_rect = Rect2(0, 0, 16, 10)
patch_margin_left = 6
patch_margin_top = 3
patch_margin_right = 6
patch_margin_bottom = 3

[node name="ProgressBar" type="ProgressBar" parent="genericAdventurer1/uiControl/bottomBar/hpMpBar/mpBar"]
show_behind_parent = true
layout_mode = 0
offset_right = 250.0
offset_bottom = 64.0
scale = Vector2(0.143, 0.138)
theme_override_colors/font_color = Color(0.411765, 0, 0.541176, 1)
theme_override_font_sizes/font_size = 46
theme_override_styles/background = SubResource("StyleBoxFlat_tsxmw")
theme_override_styles/fill = SubResource("StyleBoxFlat_wcgdt")
value = 100.0

[node name="syncRangeToCharacterStat2" type="Node" parent="genericAdventurer1/uiControl/bottomBar/hpMpBar/mpBar/ProgressBar"]
script = ExtResource("18_5cse6")
stat = "mp"
max_stat = "max_mp"

[node name="gearBar" type="NinePatchRect" parent="genericAdventurer1/uiControl/bottomBar"]
texture_filter = 1
layout_mode = 2
size_flags_horizontal = 3
texture = ExtResource("16_6nese")
region_rect = Rect2(1, 1, 6, 6)
patch_margin_left = 2
patch_margin_top = 2
patch_margin_right = 2
patch_margin_bottom = 2
axis_stretch_horizontal = 1
axis_stretch_vertical = 1

[node name="MarginContainer" type="MarginContainer" parent="genericAdventurer1/uiControl/bottomBar/gearBar"]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
theme_override_constants/margin_left = 3
theme_override_constants/margin_top = 2
theme_override_constants/margin_right = 3
theme_override_constants/margin_bottom = 2

[node name="ScrollContainer" type="ScrollContainer" parent="genericAdventurer1/uiControl/bottomBar/gearBar/MarginContainer"]
layout_mode = 2
theme = SubResource("Theme_xtp7f")
horizontal_scroll_mode = 2
vertical_scroll_mode = 0

[node name="HBoxContainer" type="HBoxContainer" parent="genericAdventurer1/uiControl/bottomBar/gearBar/MarginContainer/ScrollContainer"]
layout_mode = 2
size_flags_horizontal = 0
theme_override_constants/separation = 2

[node name="mirrorGearNodesToUi" type="Node" parent="genericAdventurer1/uiControl/bottomBar/gearBar/MarginContainer/ScrollContainer/HBoxContainer"]
script = ExtResource("20_n61d3")

[node name="genericAdventurer2" parent="." instance=ExtResource("1_mg3gl")]
metadata/ui_gear_cells = 3

[node name="Camera2D" type="Camera2D" parent="genericAdventurer2"]
zoom = Vector2(4, 4)

[node name="walkAbility" type="Node" parent="genericAdventurer2"]
script = ExtResource("5_4jc16")

[node name="moveCharacterOnAction" type="Node" parent="genericAdventurer2/walkAbility"]
script = ExtResource("6_gwncv")

[node name="healthStats" type="Node" parent="genericAdventurer2"]
script = ExtResource("7_fj1jy")
max_hp = 1000.0
hp = 500.0

[node name="dieOnZeroHp" type="Node" parent="genericAdventurer2/healthStats"]
script = ExtResource("8_50eih")

[node name="makeBasicDamagePopups" type="Node2D" parent="genericAdventurer2"]
position = Vector2(0, -8)
script = ExtResource("15_44pn0")

[node name="inSingleFaction" type="Node" parent="genericAdventurer2"]
script = ExtResource("9_gbaly")
faction = "players"

[node name="setCharacterTargetToMouseLocation" type="Node" parent="genericAdventurer2"]
script = ExtResource("11_jx7sd")

[node name="mainAttackOnAction" type="Node" parent="genericAdventurer2"]
script = SubResource("GDScript_6533p")

[node name="produceShotAbility" type="Node" parent="genericAdventurer2" groups=["ability", "gear", "main_attack"]]
script = ExtResource("21_7cokh")
cast_speed = 80.0
max_attack_rate = 40
metadata/ui_cell_display = ExtResource("22_b0cmj")
metadata/use_ability = ""

[node name="hpFlaskAbility" type="Node" parent="genericAdventurer2" groups=["ability", "gear"]]
script = ExtResource("4_toscw")
metadata/ui_cell_display = ExtResource("2_0f1mu")
metadata/ui_cell_left_click = "use_flask"
metadata/use_ability = "use_flask"

[node name="hpPot" type="Sprite2D" parent="genericAdventurer2" groups=["gear"]]
visible = false
texture = ExtResource("2_0f1mu")
script = ExtResource("3_akax0")
metadata/ui_cell_display = ExtResource("2_0f1mu")
metadata/ui_cell_left_click = "use_flask"

[node name="uiControl" type="Control" parent="genericAdventurer2"]
z_index = 1000
z_as_relative = false
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
offset_left = -138.0
offset_top = -76.0
offset_right = 136.681
offset_bottom = 74.486
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 1

[node name="bottomBar" type="HBoxContainer" parent="genericAdventurer2/uiControl"]
custom_minimum_size = Vector2(0, 13)
layout_mode = 1
anchors_preset = 12
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
offset_left = 2.0
offset_top = -10.486
offset_right = 2.00003
offset_bottom = 1.51401
grow_horizontal = 2
grow_vertical = 0
mouse_filter = 0
theme_override_constants/separation = 0

[node name="hpMpBar" type="NinePatchRect" parent="genericAdventurer2/uiControl/bottomBar"]
texture_filter = 1
custom_minimum_size = Vector2(82, 0)
layout_mode = 2
texture = ExtResource("16_6nese")
region_rect = Rect2(1, 1, 6, 6)
patch_margin_left = 2
patch_margin_top = 2
patch_margin_right = 2
patch_margin_bottom = 2
axis_stretch_horizontal = 1
axis_stretch_vertical = 1

[node name="expanderButton" type="TextureButton" parent="genericAdventurer2/uiControl/bottomBar/hpMpBar"]
custom_minimum_size = Vector2(8, 8)
layout_mode = 1
anchors_preset = 4
anchor_top = 0.5
anchor_bottom = 0.5
offset_top = -6.0
offset_right = 12.0
offset_bottom = 6.0
grow_vertical = 2
toggle_mode = true
texture_normal = ExtResource("17_c6xje")
stretch_mode = 5

[node name="hpBar" type="ProgressBar" parent="genericAdventurer2/uiControl/bottomBar/hpMpBar"]
layout_mode = 0
offset_left = 11.3419
offset_top = 1.96497
offset_right = 149.342
offset_bottom = 41.965
scale = Vector2(0.224581, 0.224581)
theme_override_colors/font_color = Color(0.52549, 0, 0.0666667, 1)
theme_override_font_sizes/font_size = 28
theme_override_styles/background = SubResource("StyleBoxFlat_61jkb")
theme_override_styles/fill = SubResource("StyleBoxFlat_wbpci")
value = 100.0

[node name="syncRangeToCharacterStat" type="Node" parent="genericAdventurer2/uiControl/bottomBar/hpMpBar/hpBar"]
script = ExtResource("18_5cse6")
max_stat = "max_hp"

[node name="hpBackground" type="NinePatchRect" parent="genericAdventurer2/uiControl/bottomBar/hpMpBar"]
layout_mode = 0
offset_left = 11.3419
offset_top = 1.96497
offset_right = 42.3419
offset_bottom = 10.965
texture = ExtResource("19_trqbl")
region_rect = Rect2(0, 0, 16, 10)
patch_margin_left = 6
patch_margin_top = 3
patch_margin_right = 6
patch_margin_bottom = 3

[node name="mpBar" type="Control" parent="genericAdventurer2/uiControl/bottomBar/hpMpBar"]
anchors_preset = 0
offset_left = 43.0
offset_top = 2.0
offset_right = 79.0
offset_bottom = 11.0

[node name="mpBackground" type="NinePatchRect" parent="genericAdventurer2/uiControl/bottomBar/hpMpBar/mpBar"]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
texture = ExtResource("19_trqbl")
region_rect = Rect2(0, 0, 16, 10)
patch_margin_left = 6
patch_margin_top = 3
patch_margin_right = 6
patch_margin_bottom = 3

[node name="ProgressBar" type="ProgressBar" parent="genericAdventurer2/uiControl/bottomBar/hpMpBar/mpBar"]
show_behind_parent = true
layout_mode = 0
offset_right = 250.0
offset_bottom = 64.0
scale = Vector2(0.143, 0.138)
theme_override_colors/font_color = Color(0.411765, 0, 0.541176, 1)
theme_override_font_sizes/font_size = 46
theme_override_styles/background = SubResource("StyleBoxFlat_61jkb")
theme_override_styles/fill = SubResource("StyleBoxFlat_va6im")
value = 100.0

[node name="syncRangeToCharacterStat2" type="Node" parent="genericAdventurer2/uiControl/bottomBar/hpMpBar/mpBar/ProgressBar"]
script = ExtResource("18_5cse6")
stat = "mp"
max_stat = "max_mp"

[node name="gearBar" type="NinePatchRect" parent="genericAdventurer2/uiControl/bottomBar"]
texture_filter = 1
layout_mode = 2
size_flags_horizontal = 3
texture = ExtResource("16_6nese")
region_rect = Rect2(1, 1, 6, 6)
patch_margin_left = 2
patch_margin_top = 2
patch_margin_right = 2
patch_margin_bottom = 2
axis_stretch_horizontal = 1
axis_stretch_vertical = 1

[node name="MarginContainer" type="MarginContainer" parent="genericAdventurer2/uiControl/bottomBar/gearBar"]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
theme_override_constants/margin_left = 3
theme_override_constants/margin_top = 2
theme_override_constants/margin_right = 3
theme_override_constants/margin_bottom = 2

[node name="ScrollContainer" type="ScrollContainer" parent="genericAdventurer2/uiControl/bottomBar/gearBar/MarginContainer"]
layout_mode = 2
theme = SubResource("Theme_6axxe")
horizontal_scroll_mode = 2
vertical_scroll_mode = 0

[node name="HBoxContainer" type="HBoxContainer" parent="genericAdventurer2/uiControl/bottomBar/gearBar/MarginContainer/ScrollContainer"]
layout_mode = 2
size_flags_horizontal = 0
theme_override_constants/separation = 2

[node name="mirrorGearNodesToUi" type="Node" parent="genericAdventurer2/uiControl/bottomBar/gearBar/MarginContainer/ScrollContainer/HBoxContainer"]
script = ExtResource("20_n61d3")

[node name="genericAdventurer3" parent="." instance=ExtResource("1_mg3gl")]
metadata/ui_gear_cells = 3

[node name="Camera2D" type="Camera2D" parent="genericAdventurer3"]
zoom = Vector2(4, 4)

[node name="walkAbility" type="Node" parent="genericAdventurer3"]
script = ExtResource("5_4jc16")

[node name="moveCharacterOnAction" type="Node" parent="genericAdventurer3/walkAbility"]
script = ExtResource("6_gwncv")

[node name="healthStats" type="Node" parent="genericAdventurer3"]
script = ExtResource("7_fj1jy")
max_hp = 1000.0
hp = 500.0

[node name="dieOnZeroHp" type="Node" parent="genericAdventurer3/healthStats"]
script = ExtResource("8_50eih")

[node name="makeBasicDamagePopups" type="Node2D" parent="genericAdventurer3"]
position = Vector2(0, -8)
script = ExtResource("15_44pn0")

[node name="inSingleFaction" type="Node" parent="genericAdventurer3"]
script = ExtResource("9_gbaly")
faction = "players"

[node name="setCharacterTargetToMouseLocation" type="Node" parent="genericAdventurer3"]
script = ExtResource("11_jx7sd")

[node name="mainAttackOnAction" type="Node" parent="genericAdventurer3"]
script = SubResource("GDScript_o7ljt")

[node name="produceShotAbility" type="Node" parent="genericAdventurer3" groups=["ability", "gear", "main_attack"]]
script = SubResource("GDScript_hhs6h")
metadata/ui_cell_display = ExtResource("22_b0cmj")
metadata/ui_cell_left_click = "equip"

[node name="hpFlaskAbility" type="Node" parent="genericAdventurer3" groups=["ability", "gear"]]
editor_description = "meta:
  health: how much healed by; default 25
  max_uses: -1 for infinite, >0 for that many uses; default 1
  "
script = SubResource("GDScript_y03ju")
metadata/ui_cell_display = ExtResource("2_0f1mu")
metadata/ui_cell_left_click = "use_flask"
metadata/use_ability = "use_flask"

[node name="basicArmor" type="Node" parent="genericAdventurer3"]
script = SubResource("GDScript_owfkt")
metadata/ui_cell_left_click = ""
metadata/ui_cell_display = ExtResource("23_05j5w")

[node name="uiControl" type="Control" parent="genericAdventurer3"]
z_index = 1000
z_as_relative = false
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
offset_left = -138.0
offset_top = -76.0
offset_right = 136.681
offset_bottom = 74.486
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 1

[node name="bottomBar" type="HBoxContainer" parent="genericAdventurer3/uiControl"]
custom_minimum_size = Vector2(0, 13)
layout_mode = 1
anchors_preset = 12
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
offset_left = 2.0
offset_top = -10.486
offset_right = 2.00003
offset_bottom = 1.51401
grow_horizontal = 2
grow_vertical = 0
mouse_filter = 0
theme_override_constants/separation = 0

[node name="hpMpBar" type="NinePatchRect" parent="genericAdventurer3/uiControl/bottomBar"]
texture_filter = 1
custom_minimum_size = Vector2(82, 0)
layout_mode = 2
texture = ExtResource("16_6nese")
region_rect = Rect2(1, 1, 6, 6)
patch_margin_left = 2
patch_margin_top = 2
patch_margin_right = 2
patch_margin_bottom = 2
axis_stretch_horizontal = 1
axis_stretch_vertical = 1

[node name="expanderButton" type="TextureButton" parent="genericAdventurer3/uiControl/bottomBar/hpMpBar"]
custom_minimum_size = Vector2(8, 8)
layout_mode = 1
anchors_preset = 4
anchor_top = 0.5
anchor_bottom = 0.5
offset_top = -6.0
offset_right = 12.0
offset_bottom = 6.0
grow_vertical = 2
toggle_mode = true
texture_normal = ExtResource("17_c6xje")
stretch_mode = 5

[node name="hpBar" type="ProgressBar" parent="genericAdventurer3/uiControl/bottomBar/hpMpBar"]
layout_mode = 0
offset_left = 11.3419
offset_top = 1.96497
offset_right = 149.342
offset_bottom = 41.965
scale = Vector2(0.224581, 0.224581)
theme_override_colors/font_color = Color(0.52549, 0, 0.0666667, 1)
theme_override_font_sizes/font_size = 28
theme_override_styles/background = SubResource("StyleBoxFlat_d2d0h")
theme_override_styles/fill = SubResource("StyleBoxFlat_estrh")
value = 100.0

[node name="syncRangeToCharacterStat" type="Node" parent="genericAdventurer3/uiControl/bottomBar/hpMpBar/hpBar"]
script = ExtResource("18_5cse6")
max_stat = "max_hp"

[node name="hpBackground" type="NinePatchRect" parent="genericAdventurer3/uiControl/bottomBar/hpMpBar"]
layout_mode = 0
offset_left = 11.3419
offset_top = 1.96497
offset_right = 42.3419
offset_bottom = 10.965
texture = ExtResource("19_trqbl")
region_rect = Rect2(0, 0, 16, 10)
patch_margin_left = 6
patch_margin_top = 3
patch_margin_right = 6
patch_margin_bottom = 3

[node name="mpBar" type="Control" parent="genericAdventurer3/uiControl/bottomBar/hpMpBar"]
anchors_preset = 0
offset_left = 43.0
offset_top = 2.0
offset_right = 79.0
offset_bottom = 11.0

[node name="mpBackground" type="NinePatchRect" parent="genericAdventurer3/uiControl/bottomBar/hpMpBar/mpBar"]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
texture = ExtResource("19_trqbl")
region_rect = Rect2(0, 0, 16, 10)
patch_margin_left = 6
patch_margin_top = 3
patch_margin_right = 6
patch_margin_bottom = 3

[node name="ProgressBar" type="ProgressBar" parent="genericAdventurer3/uiControl/bottomBar/hpMpBar/mpBar"]
show_behind_parent = true
layout_mode = 0
offset_right = 250.0
offset_bottom = 64.0
scale = Vector2(0.143, 0.138)
theme_override_colors/font_color = Color(0.411765, 0, 0.541176, 1)
theme_override_font_sizes/font_size = 46
theme_override_styles/background = SubResource("StyleBoxFlat_d2d0h")
theme_override_styles/fill = SubResource("StyleBoxFlat_oo5oy")
value = 100.0

[node name="syncRangeToCharacterStat2" type="Node" parent="genericAdventurer3/uiControl/bottomBar/hpMpBar/mpBar/ProgressBar"]
script = ExtResource("18_5cse6")
stat = "mp"
max_stat = "max_mp"

[node name="gearBar" type="NinePatchRect" parent="genericAdventurer3/uiControl/bottomBar"]
texture_filter = 1
layout_mode = 2
size_flags_horizontal = 3
texture = ExtResource("16_6nese")
region_rect = Rect2(1, 1, 6, 6)
patch_margin_left = 2
patch_margin_top = 2
patch_margin_right = 2
patch_margin_bottom = 2
axis_stretch_horizontal = 1
axis_stretch_vertical = 1

[node name="MarginContainer" type="MarginContainer" parent="genericAdventurer3/uiControl/bottomBar/gearBar"]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
theme_override_constants/margin_left = 3
theme_override_constants/margin_top = 2
theme_override_constants/margin_right = 3
theme_override_constants/margin_bottom = 2

[node name="ScrollContainer" type="ScrollContainer" parent="genericAdventurer3/uiControl/bottomBar/gearBar/MarginContainer"]
layout_mode = 2
theme = SubResource("Theme_4deh5")
horizontal_scroll_mode = 2
vertical_scroll_mode = 0

[node name="HBoxContainer" type="HBoxContainer" parent="genericAdventurer3/uiControl/bottomBar/gearBar/MarginContainer/ScrollContainer"]
layout_mode = 2
size_flags_horizontal = 0
theme_override_constants/separation = 2

[node name="mirrorGearNodesToUi" type="Node" parent="genericAdventurer3/uiControl/bottomBar/gearBar/MarginContainer/ScrollContainer/HBoxContainer"]
editor_description = "This looks for all of parent composite's first children `gear` group members and creates a `ui_gear_cell.tscn` instance for each
The `ui_gear_cell`s are clickable and call their corresponding `gear` node's method referenced in the gear node's `ui_cell_left_click` metadata property"
script = ExtResource("20_n61d3")

[node name="genericEnemy1" parent="." groups=["character"] instance=ExtResource("24_i2yh1")]
position = Vector2(-71, 20)

[node name="targetNearestNonfaction" parent="genericEnemy1" index="4"]
visible = false

[node name="Sprite2D" type="Sprite2D" parent="genericEnemy1"]
texture_filter = 1
material = ExtResource("25_gh44a")
texture = ExtResource("26_8fbmb")
region_rect = Rect2(0, 0, 10, 10)

[node name="basicWeaponAttackAbility" type="Node" parent="genericEnemy1" groups=["ability", "main_attack"]]
script = ExtResource("13_o27i6")
cast_speed = 60.0
shot_resource = ExtResource("14_6fypr")

[node name="genericEnemy3" parent="." instance=ExtResource("24_i2yh1")]
position = Vector2(37.6776, 23.0497)

[node name="CollisionShape2D2" type="CollisionShape2D" parent="genericEnemy3"]
visible = false
shape = SubResource("RectangleShape2D_fy1oa")

[node name="inFaction" parent="genericEnemy3" instance=ExtResource("27_2cfos")]
metadata/faction_array = ["enemies"]

[node name="healthStats2" type="Node" parent="genericEnemy3"]
script = SubResource("GDScript_ku7us")

[node name="walkAbility2" type="Node" parent="genericEnemy3"]
script = SubResource("GDScript_yh3vq")

[node name="walkTowardTargetedObject" type="Node" parent="genericEnemy3"]
script = SubResource("GDScript_83ck8")

[node name="randomlyWalk" type="Node" parent="genericEnemy3"]
script = SubResource("GDScript_6rytb")

[node name="targetNearestNonfaction2" type="Area2D" parent="genericEnemy3"]
collision_layer = 0
collision_mask = 2
script = SubResource("GDScript_juai5")

[node name="CollisionShape2D" type="CollisionShape2D" parent="genericEnemy3/targetNearestNonfaction2"]
visible = false
shape = SubResource("RectangleShape2D_v5uvg")

[node name="setTargetPointToTargetObject2" type="Node" parent="genericEnemy3"]
script = SubResource("GDScript_lrgv4")

[node name="DebugPoint" type="Sprite2D" parent="genericEnemy3/setTargetPointToTargetObject2"]
modulate = Color(0.87451, 0, 0.133333, 1)
texture_filter = 1
position = Vector2(18.5, 20)
texture = ExtResource("28_8j0kq")

[node name="shootConstantlyAtTargetObject" type="Node" parent="genericEnemy3"]
script = SubResource("GDScript_c8wlx")

[node name="makeBasicDamagePopups3" type="Node2D" parent="genericEnemy3"]
position = Vector2(0, -8)
script = SubResource("GDScript_xo1bd")

[node name="dieOnZeroHp" parent="genericEnemy3" instance=ExtResource("29_ysf1c")]

[node name="dropLootOnDie" type="Node" parent="genericEnemy3"]
script = SubResource("GDScript_7mxs5")

[node name="freeOnDie" type="Node" parent="genericEnemy3"]
script = SubResource("GDScript_lk3t2")

[node name="Sprite2D" type="Sprite2D" parent="genericEnemy3"]
texture_filter = 1
material = ExtResource("25_gh44a")
texture = ExtResource("26_8fbmb")
region_rect = Rect2(0, 0, 10, 10)

[node name="produceShotAbility" type="Node" parent="genericEnemy3" groups=["ability", "gear", "main_attack"]]
script = SubResource("GDScript_warxp")
metadata/ui_cell_display = ExtResource("22_b0cmj")
metadata/ui_cell_left_click = "equip"

[node name="genericAdventurerWithGearCellUI" parent="." instance=ExtResource("1_mg3gl")]
script = null
metadata/ui_gear_cells = 6

[node name="Camera2D" type="Camera2D" parent="genericAdventurerWithGearCellUI"]
zoom = Vector2(4, 4)

[node name="walkAbility" type="Node" parent="genericAdventurerWithGearCellUI"]
script = SubResource("GDScript_ps1h6")

[node name="moveCharacterOnAction" type="Node" parent="genericAdventurerWithGearCellUI"]
script = SubResource("GDScript_sdq1b")

[node name="healthStats" type="Node" parent="genericAdventurerWithGearCellUI"]
script = SubResource("GDScript_cdtp0")

[node name="equipmentRestrictions" type="Node" parent="genericAdventurerWithGearCellUI"]
editor_description = "meta are like `equipment_class = max_equipped_gear_in_that_class`"
script = SubResource("GDScript_rfmea")
metadata/armor = 1
metadata/weapon = 1

[node name="dieOnZeroHp" type="Node" parent="genericAdventurerWithGearCellUI"]
script = SubResource("GDScript_qvf7r")

[node name="makeBasicDamagePopups4" type="Node2D" parent="genericAdventurerWithGearCellUI"]
position = Vector2(0, -8)
script = SubResource("GDScript_dmgcq")

[node name="inFaction" parent="genericAdventurerWithGearCellUI" instance=ExtResource("27_2cfos")]
metadata/faction_array = ["players"]

[node name="setTargetToMouseLocation" type="Node" parent="genericAdventurerWithGearCellUI"]
script = SubResource("GDScript_kfn3k")

[node name="mainAttackOnAction" type="Node" parent="genericAdventurerWithGearCellUI"]
script = SubResource("GDScript_p226j")

[node name="hpFlaskAbility" type="Node" parent="genericAdventurerWithGearCellUI" groups=["ability", "gear"]]
editor_description = "meta:
  health: how much healed by; default 25
  max_uses: -1 for infinite, >0 for that many uses; default 1
  "
script = SubResource("GDScript_qv40u")
metadata/ui_cell_display = ExtResource("2_0f1mu")
metadata/use_ability = "use_flask"

[node name="produceShotAbility" type="Node" parent="genericAdventurerWithGearCellUI" groups=["ability", "gear", "main_attack"]]
script = SubResource("GDScript_b4sin")
metadata/ui_cell_display = ExtResource("22_b0cmj")
metadata/ui_cell_left_click = "equip"

[node name="basicArmor" parent="genericAdventurerWithGearCellUI" instance=ExtResource("30_2h6sa")]

[node name="uiControl" type="Control" parent="genericAdventurerWithGearCellUI"]
z_index = 1000
z_as_relative = false
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
offset_left = -138.0
offset_top = -76.0
offset_right = 136.681
offset_bottom = 74.486
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 1

[node name="bottomBar" type="HBoxContainer" parent="genericAdventurerWithGearCellUI/uiControl"]
custom_minimum_size = Vector2(0, 13)
layout_mode = 1
anchors_preset = 12
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
offset_left = 2.0
offset_top = -10.486
offset_right = 2.00003
offset_bottom = 1.51401
grow_horizontal = 2
grow_vertical = 0
mouse_filter = 0
theme_override_constants/separation = 0

[node name="hpMpBar" type="NinePatchRect" parent="genericAdventurerWithGearCellUI/uiControl/bottomBar"]
texture_filter = 1
custom_minimum_size = Vector2(82, 0)
layout_mode = 2
texture = ExtResource("16_6nese")
region_rect = Rect2(1, 1, 6, 6)
patch_margin_left = 2
patch_margin_top = 2
patch_margin_right = 2
patch_margin_bottom = 2
axis_stretch_horizontal = 1
axis_stretch_vertical = 1

[node name="expanderButton" type="TextureButton" parent="genericAdventurerWithGearCellUI/uiControl/bottomBar/hpMpBar"]
custom_minimum_size = Vector2(8, 8)
layout_mode = 1
anchors_preset = 4
anchor_top = 0.5
anchor_bottom = 0.5
offset_top = -6.0
offset_right = 12.0
offset_bottom = 6.0
grow_vertical = 2
toggle_mode = true
texture_normal = ExtResource("17_c6xje")
stretch_mode = 5

[node name="hpBar" type="ProgressBar" parent="genericAdventurerWithGearCellUI/uiControl/bottomBar/hpMpBar"]
layout_mode = 0
offset_left = 11.3419
offset_top = 1.96497
offset_right = 149.342
offset_bottom = 41.965
scale = Vector2(0.224581, 0.224581)
theme_override_colors/font_color = Color(0.52549, 0, 0.0666667, 1)
theme_override_font_sizes/font_size = 28
theme_override_styles/background = SubResource("StyleBoxFlat_1n0gk")
theme_override_styles/fill = SubResource("StyleBoxFlat_7v71u")
value = 100.0

[node name="syncRangeToCharacterStat" parent="genericAdventurerWithGearCellUI/uiControl/bottomBar/hpMpBar/hpBar" instance=ExtResource("31_tso66")]

[node name="hpBackground" type="NinePatchRect" parent="genericAdventurerWithGearCellUI/uiControl/bottomBar/hpMpBar"]
layout_mode = 0
offset_left = 11.3419
offset_top = 1.96497
offset_right = 42.3419
offset_bottom = 10.965
texture = ExtResource("19_trqbl")
region_rect = Rect2(0, 0, 16, 10)
patch_margin_left = 6
patch_margin_top = 3
patch_margin_right = 6
patch_margin_bottom = 3

[node name="mpBar" type="Control" parent="genericAdventurerWithGearCellUI/uiControl/bottomBar/hpMpBar"]
anchors_preset = 0
offset_left = 43.0
offset_top = 2.0
offset_right = 79.0
offset_bottom = 11.0

[node name="mpBackground" type="NinePatchRect" parent="genericAdventurerWithGearCellUI/uiControl/bottomBar/hpMpBar/mpBar"]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
texture = ExtResource("19_trqbl")
region_rect = Rect2(0, 0, 16, 10)
patch_margin_left = 6
patch_margin_top = 3
patch_margin_right = 6
patch_margin_bottom = 3

[node name="ProgressBar" type="ProgressBar" parent="genericAdventurerWithGearCellUI/uiControl/bottomBar/hpMpBar/mpBar"]
show_behind_parent = true
layout_mode = 0
offset_right = 250.0
offset_bottom = 64.0
scale = Vector2(0.143, 0.138)
theme_override_colors/font_color = Color(0.411765, 0, 0.541176, 1)
theme_override_font_sizes/font_size = 46
theme_override_styles/background = SubResource("StyleBoxFlat_1n0gk")
theme_override_styles/fill = SubResource("StyleBoxFlat_05hvf")
value = 100.0

[node name="syncRangeToCharacterStat" parent="genericAdventurerWithGearCellUI/uiControl/bottomBar/hpMpBar/mpBar/ProgressBar" instance=ExtResource("31_tso66")]

[node name="gearBar" type="NinePatchRect" parent="genericAdventurerWithGearCellUI/uiControl/bottomBar"]
texture_filter = 1
layout_mode = 2
size_flags_horizontal = 3
texture = ExtResource("16_6nese")
region_rect = Rect2(1, 1, 6, 6)
patch_margin_left = 2
patch_margin_top = 2
patch_margin_right = 2
patch_margin_bottom = 2
axis_stretch_horizontal = 1
axis_stretch_vertical = 1

[node name="MarginContainer" type="MarginContainer" parent="genericAdventurerWithGearCellUI/uiControl/bottomBar/gearBar"]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
theme_override_constants/margin_left = 3
theme_override_constants/margin_top = 2
theme_override_constants/margin_right = 3
theme_override_constants/margin_bottom = 2

[node name="ScrollContainer" type="ScrollContainer" parent="genericAdventurerWithGearCellUI/uiControl/bottomBar/gearBar/MarginContainer"]
layout_mode = 2
theme = SubResource("Theme_w7m20")
horizontal_scroll_mode = 2
vertical_scroll_mode = 0

[node name="HBoxContainer" type="HBoxContainer" parent="genericAdventurerWithGearCellUI/uiControl/bottomBar/gearBar/MarginContainer/ScrollContainer"]
layout_mode = 2
size_flags_horizontal = 0
theme_override_constants/separation = 2

[node name="mirrorGearNodesToUi" type="Node" parent="genericAdventurerWithGearCellUI/uiControl/bottomBar/gearBar/MarginContainer/ScrollContainer/HBoxContainer"]
editor_description = "This looks for all of parent composite's first children `gear` group members and creates a `ui_gear_cell.tscn` instance for each
The `ui_gear_cell`s are clickable and call their corresponding `gear` node's method referenced in the gear node's `ui_cell_left_click` metadata property"
script = SubResource("GDScript_xoef0")

[node name="mirrorGearNodesToUi" type="Node" parent="."]
editor_description = "This looks for all of parent composite's first children `gear` group members and creates a `ui_gear_cell.tscn` instance for each
The `ui_gear_cell`s are clickable and call their corresponding `gear` node's method referenced in the gear node's `ui_cell_left_click` metadata property"
script = SubResource("GDScript_8ikdp")

[node name="genericAdventurer4" parent="." groups=["gear_holder"] instance=ExtResource("1_mg3gl")]
script = null
metadata/ui_gear_cells = 6

[node name="setLibMouseCanvasItem" type="Node2D" parent="genericAdventurer4"]
script = SubResource("GDScript_e5osu")

[node name="Camera2D" type="Camera2D" parent="genericAdventurer4"]
zoom = Vector2(4, 4)

[node name="walkAbility" type="Node" parent="genericAdventurer4"]
script = SubResource("GDScript_ouy83")

[node name="moveCharacterOnAction" type="Node" parent="genericAdventurer4"]
script = SubResource("GDScript_oq6s2")

[node name="healthStats" type="Node" parent="genericAdventurer4"]
script = SubResource("GDScript_3d0ug")

[node name="equipmentRestrictions" type="Node" parent="genericAdventurer4"]
editor_description = "meta are like `equipment_class = max_equipped_gear_in_that_class`"
script = SubResource("GDScript_653t2")
metadata/armor = 1
metadata/weapon = 1

[node name="dieOnZeroHp" type="Node" parent="genericAdventurer4"]
script = SubResource("GDScript_rjo0x")

[node name="makeBasicDamagePopups4" type="Node2D" parent="genericAdventurer4"]
position = Vector2(0, -8)
script = SubResource("GDScript_2tpsa")

[node name="inFaction" parent="genericAdventurer4" instance=ExtResource("27_2cfos")]
metadata/faction_array = ["players"]

[node name="setTargetToMouseLocation" type="Node" parent="genericAdventurer4"]
script = SubResource("GDScript_7thw1")

[node name="mainAttackOnAction" type="Node" parent="genericAdventurer4"]
script = SubResource("GDScript_wul5y")

[node name="hpFlaskGear" type="Node" parent="genericAdventurer4" groups=["ability", "gear"]]
editor_description = "meta:
  health: how much healed by; default 25
  max_uses: -1 for infinite, >0 for that many uses; default 1
  "
script = SubResource("GDScript_2qfgs")
metadata/ui_cell_display = ExtResource("2_0f1mu")
metadata/use_ability = "use_flask"

[node name="produceShotGear" type="Node" parent="genericAdventurer4" groups=["ability", "gear", "main_attack"]]
script = SubResource("GDScript_gdc7a")
metadata/ui_cell_display = ExtResource("22_b0cmj")
metadata/ui_cell_left_click = "equip"

[node name="basicArmor" parent="genericAdventurer4" instance=ExtResource("30_2h6sa")]

[node name="moveForeignGearCellsToThisOnShiftClick" type="Node" parent="genericAdventurer4"]
script = SubResource("GDScript_xubqq")

[node name="activateOwnGearCellsOnClick" type="Node" parent="genericAdventurer4"]
script = SubResource("GDScript_jokbh")

[node name="deactivateOwnGearOnRemoved" type="Node" parent="genericAdventurer4"]
script = SubResource("GDScript_25vtd")

[node name="toggleContainerVisibilityOnClick" type="Node" parent="genericAdventurer4"]
script = SubResource("GDScript_phvdr")

[node name="uiControl" type="Control" parent="genericAdventurer4"]
z_index = 1000
layout_mode = 3
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
offset_left = -138.0
offset_top = -76.0
offset_right = 136.681
offset_bottom = 74.486
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2

[node name="bottomBar" type="HBoxContainer" parent="genericAdventurer4/uiControl"]
custom_minimum_size = Vector2(0, 13)
layout_mode = 1
anchors_preset = 12
anchor_top = 1.0
anchor_right = 1.0
anchor_bottom = 1.0
offset_left = 2.0
offset_top = -10.486
offset_right = 2.00003
offset_bottom = 1.51401
grow_horizontal = 2
grow_vertical = 0
mouse_filter = 2
theme_override_constants/separation = 0

[node name="hpMpBar" type="NinePatchRect" parent="genericAdventurer4/uiControl/bottomBar"]
texture_filter = 1
custom_minimum_size = Vector2(82, 0)
layout_mode = 2
texture = ExtResource("16_6nese")
region_rect = Rect2(1, 1, 6, 6)
patch_margin_left = 2
patch_margin_top = 2
patch_margin_right = 2
patch_margin_bottom = 2
axis_stretch_horizontal = 1
axis_stretch_vertical = 1

[node name="expanderButton" type="TextureButton" parent="genericAdventurer4/uiControl/bottomBar/hpMpBar"]
visibility_layer = 2
custom_minimum_size = Vector2(8, 8)
layout_mode = 1
anchors_preset = 4
anchor_top = 0.5
anchor_bottom = 0.5
offset_top = -6.0
offset_right = 12.0
offset_bottom = 6.0
grow_vertical = 2
mouse_filter = 2
toggle_mode = true
texture_normal = ExtResource("17_c6xje")
stretch_mode = 5

[node name="hpBar" type="ProgressBar" parent="genericAdventurer4/uiControl/bottomBar/hpMpBar"]
visibility_layer = 2
layout_mode = 0
offset_left = 11.3419
offset_top = 1.96497
offset_right = 149.342
offset_bottom = 41.965
scale = Vector2(0.224581, 0.224581)
mouse_filter = 2
theme_override_colors/font_color = Color(0.52549, 0, 0.0666667, 1)
theme_override_font_sizes/font_size = 28
theme_override_styles/background = SubResource("StyleBoxFlat_6wdf5")
theme_override_styles/fill = SubResource("StyleBoxFlat_mlumg")
value = 100.0

[node name="syncRangeToCharacterStat" parent="genericAdventurer4/uiControl/bottomBar/hpMpBar/hpBar" instance=ExtResource("31_tso66")]

[node name="hpBackground" type="NinePatchRect" parent="genericAdventurer4/uiControl/bottomBar/hpMpBar"]
visibility_layer = 2
layout_mode = 0
offset_left = 11.3419
offset_top = 1.96497
offset_right = 42.3419
offset_bottom = 10.965
texture = ExtResource("19_trqbl")
region_rect = Rect2(0, 0, 16, 10)
patch_margin_left = 6
patch_margin_top = 3
patch_margin_right = 6
patch_margin_bottom = 3

[node name="mpBar" type="Control" parent="genericAdventurer4/uiControl/bottomBar/hpMpBar"]
visibility_layer = 2
anchors_preset = 0
offset_left = 43.0
offset_top = 2.0
offset_right = 79.0
offset_bottom = 11.0
mouse_filter = 2

[node name="mpBackground" type="NinePatchRect" parent="genericAdventurer4/uiControl/bottomBar/hpMpBar/mpBar"]
visibility_layer = 2
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
texture = ExtResource("19_trqbl")
region_rect = Rect2(0, 0, 16, 10)
patch_margin_left = 6
patch_margin_top = 3
patch_margin_right = 6
patch_margin_bottom = 3

[node name="ProgressBar" type="ProgressBar" parent="genericAdventurer4/uiControl/bottomBar/hpMpBar/mpBar"]
show_behind_parent = true
visibility_layer = 2
layout_mode = 0
offset_right = 250.0
offset_bottom = 64.0
scale = Vector2(0.143, 0.138)
mouse_filter = 2
theme_override_colors/font_color = Color(0.411765, 0, 0.541176, 1)
theme_override_font_sizes/font_size = 46
theme_override_styles/background = SubResource("StyleBoxFlat_6wdf5")
theme_override_styles/fill = SubResource("StyleBoxFlat_wys0v")
value = 100.0

[node name="syncRangeToCharacterStat" parent="genericAdventurer4/uiControl/bottomBar/hpMpBar/mpBar/ProgressBar" instance=ExtResource("31_tso66")]

[node name="gearBar" type="NinePatchRect" parent="genericAdventurer4/uiControl/bottomBar"]
texture_filter = 1
layout_mode = 2
size_flags_horizontal = 3
texture = ExtResource("16_6nese")
region_rect = Rect2(1, 1, 6, 6)
patch_margin_left = 2
patch_margin_top = 2
patch_margin_right = 2
patch_margin_bottom = 2
axis_stretch_horizontal = 1
axis_stretch_vertical = 1

[node name="addGearUiCellMethodToParent" type="Node" parent="genericAdventurer4/uiControl/bottomBar/gearBar"]
script = SubResource("GDScript_7sb68")

[node name="MarginContainer" type="MarginContainer" parent="genericAdventurer4/uiControl/bottomBar/gearBar"]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2
theme_override_constants/margin_left = 3
theme_override_constants/margin_top = 2
theme_override_constants/margin_right = 3
theme_override_constants/margin_bottom = 2

[node name="ScrollContainer" type="ScrollContainer" parent="genericAdventurer4/uiControl/bottomBar/gearBar/MarginContainer"]
layout_mode = 2
mouse_filter = 2
theme = SubResource("Theme_s5dwc")
horizontal_scroll_mode = 2
vertical_scroll_mode = 0

[node name="HBoxContainer" type="HBoxContainer" parent="genericAdventurer4/uiControl/bottomBar/gearBar/MarginContainer/ScrollContainer"]
layout_mode = 2
size_flags_horizontal = 0
mouse_filter = 2
theme_override_constants/separation = 2

[node name="mirrorParentGearNodesHere" parent="genericAdventurer4/uiControl/bottomBar/gearBar/MarginContainer/ScrollContainer/HBoxContainer" instance=ExtResource("32_d87xt")]
target_parent_group = "character"

[node name="moveForeignGearCellsToThisOnShiftClick" type="Node" parent="."]
script = SubResource("GDScript_tieds")

[node name="activateOwnGearCellsOnClick" type="Node" parent="."]
script = SubResource("GDScript_olo35")

[node name="deactivateOwnGearOnRemoved" type="Node" parent="."]
script = SubResource("GDScript_dqj6j")

[node name="toggleContainerVisibilityOnClick" type="Node" parent="."]
script = SubResource("GDScript_vjjkb")

[node name="basicLootBag" parent="." instance=ExtResource("33_6g6co")]

[node name="Sprite2D2" type="Sprite2D" parent="basicLootBag"]
scale = Vector2(0.75, 0.75)
texture = ExtResource("34_oxwld")

[node name="notifyOnInput2" type="Area2D" parent="basicLootBag"]
script = SubResource("GDScript_cmjwb")

[node name="CollisionShape2D" type="CollisionShape2D" parent="basicLootBag/notifyOnInput2"]
shape = SubResource("RectangleShape2D_pqmp8")

[node name="inventoryDisplay2" type="Control" parent="basicLootBag"]
visible = false
z_index = 800
layout_mode = 3
anchors_preset = 0
offset_left = -37.7788
offset_top = -46.0
offset_right = 37.2212
offset_bottom = -6.0
mouse_filter = 2

[node name="NinePatchRect" type="NinePatchRect" parent="basicLootBag/inventoryDisplay2"]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
texture = ExtResource("16_6nese")
patch_margin_left = 3
patch_margin_top = 3
patch_margin_right = 3
patch_margin_bottom = 3

[node name="MarginContainer" type="MarginContainer" parent="basicLootBag/inventoryDisplay2"]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2
theme_override_constants/margin_left = 3
theme_override_constants/margin_top = 3
theme_override_constants/margin_right = 3
theme_override_constants/margin_bottom = 3

[node name="ScrollContainer" type="ScrollContainer" parent="basicLootBag/inventoryDisplay2/MarginContainer"]
layout_mode = 2
mouse_filter = 2
horizontal_scroll_mode = 0

[node name="FlowContainer" type="FlowContainer" parent="basicLootBag/inventoryDisplay2/MarginContainer/ScrollContainer"]
layout_mode = 2
size_flags_horizontal = 3
size_flags_vertical = 3
mouse_filter = 2

[node name="mirrorParentGearNodesHere" parent="basicLootBag/inventoryDisplay2/MarginContainer/ScrollContainer/FlowContainer" instance=ExtResource("32_d87xt")]

[node name="randomizeNoiseSeed" type="Node" parent="."]
script = SubResource("GDScript_gpgj4")

[node name="alphaMaskParentTextureWithMaskFromDirectory" type="Node" parent="."]
script = SubResource("GDScript_u8d6p")

[node name="testingEnvironmentRocks" type="Node" parent="."]

[node name="smallRock1" parent="testingEnvironmentRocks" instance=ExtResource("35_ssfj1")]
position = Vector2(-59.5686, -55.1942)

[node name="smallRock2" parent="testingEnvironmentRocks" instance=ExtResource("35_ssfj1")]
position = Vector2(19.2739, -64.033)

[node name="smallRock3" parent="testingEnvironmentRocks" instance=ExtResource("35_ssfj1")]
position = Vector2(64.8822, 8.799)

[node name="smallRock4" parent="testingEnvironmentRocks" instance=ExtResource("35_ssfj1")]
position = Vector2(57.4576, -39.9914)

[node name="smallRock5" parent="testingEnvironmentRocks" instance=ExtResource("35_ssfj1")]
position = Vector2(-85.378, -27.2635)

[node name="smallRock6" parent="testingEnvironmentRocks" instance=ExtResource("35_ssfj1")]
position = Vector2(52.8615, 42.7401)

[node name="smallRock8" parent="testingEnvironmentRocks" instance=ExtResource("35_ssfj1")]
position = Vector2(24.9307, 62.5391)

[node name="smallRock9" parent="testingEnvironmentRocks" instance=ExtResource("35_ssfj1")]
position = Vector2(-4.06067, 74.5599)

[node name="smallRock10" parent="testingEnvironmentRocks" instance=ExtResource("35_ssfj1")]
position = Vector2(-42.2444, 63.5998)

[node name="smallRock11" parent="testingEnvironmentRocks" instance=ExtResource("35_ssfj1")]
position = Vector2(-75.1249, 40.2652)

[node name="smallRock12" parent="testingEnvironmentRocks" instance=ExtResource("35_ssfj1")]
position = Vector2(-91.3884, 5.97055)

[node name="smallRock13" parent="testingEnvironmentRocks" instance=ExtResource("35_ssfj1")]
position = Vector2(-30.5772, -0.039856)

[node name="smallRock7" parent="testingEnvironmentRocks" instance=ExtResource("35_ssfj1")]
position = Vector2(-27.7488, -69.6899)

[node name="ashlandsWorld" parent="." instance=ExtResource("36_vrir7")]

[node name="ashlandsWorld2" parent="." instance=ExtResource("36_vrir7")]

[node name="reportWhenTouched" type="Area2D" parent="."]
position = Vector2(-25, -8)
collision_layer = 0
collision_mask = 7

[node name="CollisionShape2D" type="CollisionShape2D" parent="reportWhenTouched"]
position = Vector2(0, 2)
shape = SubResource("RectangleShape2D_2bdni")

[node name="reportWhenTouched" type="Node" parent="reportWhenTouched"]
script = SubResource("GDScript_buqvs")

[node name="SubViewport" type="SubViewport" parent="."]
handle_input_locally = false
canvas_item_default_texture_filter = 0
render_target_update_mode = 4

[node name="setViewportDimensionsToContainerDimensions" type="Node" parent="SubViewport"]
script = SubResource("GDScript_lsl0m")

[node name="toggleLootDisplayVisibilityOnClick" parent="." instance=ExtResource("37_qq3il")]
editor_description = "Originall for basicLootBag
"
target_node_path = NodePath("../inventoryDisplay")

[node name="CollisionShape2D" parent="toggleLootDisplayVisibilityOnClick" index="0"]
shape = SubResource("RectangleShape2D_p5y2b")

[connection signal="body_entered" from="genericEnemy3/targetNearestNonfaction2" to="genericEnemy3/targetNearestNonfaction2" method="_on_targetNearestNonfaction_body_entered"]
[connection signal="body_exited" from="genericEnemy3/targetNearestNonfaction2" to="genericEnemy3/targetNearestNonfaction2" method="_on_targetNearestNonfaction_body_exited"]
[connection signal="tree_entered" from="genericAdventurer4/uiControl" to="genericAdventurer4/uiControl/bottomBar/gearBar/addGearUiCellMethodToParent" method="_on_ui_control_tree_entered"]
[connection signal="tree_exited" from="genericAdventurer4/uiControl" to="genericAdventurer4/uiControl/bottomBar/gearBar/addGearUiCellMethodToParent" method="_on_ui_control_tree_exited"]

[editable path="genericEnemy1"]
[editable path="toggleLootDisplayVisibilityOnClick"]
