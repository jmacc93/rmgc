[gd_scene load_steps=2 format=3 uid="uid://b8oc4qapcpigw"]

[sub_resource type="GDScript" id="GDScript_14qsd"]
script/source = "extends Node

var character_composite

@export var repeatedly = true
@export var action = 'shoot'

var pressed = false


func _notification(what):
  var parent = get_parent()
  match what:
    NOTIFICATION_PARENTED:
      Comp.set_prop(parent, 'equip_weapon', Callable(self, \"equip_weapon\"))
      Comp.set_prop(parent, 'toggle_weapon_equip', Callable(self, \"equip_weapon\"))
    
    NOTIFICATION_UNPARENTED:
      Comp.remove_prop(parent, 'equip_weapon')
      Comp.remove_prop(parent, 'toggle_weapon_equip')
      

func equip_weapon(weapon_node: Node, _toggle_state: bool = true):
  if weapon_node.is_in_group('main_attack'):
    weapon_node.remove_from_group('main_attack')
    return


func find_main_attack_abilities_and_attack():
  var parent = get_parent()
  var main_attack_node_list = Lib.get_children_in_group(parent, 'main_attack')
  for attack_node in main_attack_node_list:
    if attack_node.has_method('attack'):
      attack_node.attack(parent)
    elif attack_node.has_method('run_method'): #its a classic composite object
      attack_node.run_method('attack', [parent])
    elif Comp.run_method(parent, 'attack', []): #its a metadata composite object
      return


func _unhandled_input(_event):
  if Input.is_action_just_pressed(action):
    pressed = true
    find_main_attack_abilities_and_attack()


func _process(_delta):
  if repeatedly and pressed:
    find_main_attack_abilities_and_attack()
    if Input.is_action_just_released(action):
      pressed = false
"

[node name="mainAttackOnAction" type="Node"]
script = SubResource("GDScript_14qsd")
