[gd_scene load_steps=2 format=3 uid="uid://dm1it4xh6cbaq"]

[sub_resource type="GDScript" id="GDScript_jiatt"]
script/source = "extends Node


func _notification(what):
  match what:
    NOTIFICATION_PARENTED:  
      Comp.set_prop(get_parent(), 'can_equip', can_equip)
    
    NOTIFICATION_UNPARENTED:
      Comp.remove_prop(get_parent(), 'can_equip', null)


#Counts the parent's `gear` and `equipped` group nodes in the given equipment_object's classes
#If the count is currently equal or greater the max allowed for that class, then returns false, else true
func can_equip(equipment_object):
  var equipment_classes = Comp.get_prop(equipment_object, 'equipment_classes')
  if equipment_classes == null:
    return
  
  for metaname in get_meta_list():
    var index = equipment_classes.find(metaname)
    if index == -1:
      continue #didn't find this one of self's registered classes in given object's equipment classes
    var count = count_in_class(metaname)
    var max_count = get_meta(metaname)
    return count < max_count #Note: this short-circuits remaining class evaluation, only the first found matters
  return true


func count_in_class(classname: String) -> int:
  var gear_children = Lib.get_children_in_group(get_parent(), 'gear')
  var count = 0
  for gear_child in gear_children:
    var is_equipped = gear_child.is_in_group('equipped')
    if not is_equipped:
      continue
    var equipment_classes = Comp.get_prop(gear_child, 'equipment_classes', null)
    if equipment_classes == null:
      continue
    var index = equipment_classes.find(classname) #eg ['armor', 'weapon'].find('armor') != -1
    if index != -1: #classname in equipment_classes
      count += 1
    
  return count

"

[node name="equipmentRestrictions" type="Node"]
editor_description = "This provides `can_equip` to a parent composite node. Do `var can_equip = Comp.call_method(parent_composite, 'can_equip', [gear_node])` to test whether `parent_composite` can equip `gear_node`. Here, `gear_node` must have the property `equipment_classes` which should be an array of strings like `[\"weapon\"]`. Also, any currently equipped gear node children of `parent_composite` must be in the group `equipped`. And, only nodes in `gear` are checked

So, again:
  * `can_equip` checks its parent for `gear` group nodes which are also in to `equipped` group
  * If a `gear` + `equipped` group node has a `equipment_classes` property, that is used to determine if it should be counted in an equipment class count

This requires metadata properties like `equipment_class = max_equipped_gear_in_that_class` to set the maximum equipped number for each equipment class. See a fresh equipmentRestrictions.tscn instance for an example"
script = SubResource("GDScript_jiatt")
metadata/armor = 1
metadata/weapon = 1
