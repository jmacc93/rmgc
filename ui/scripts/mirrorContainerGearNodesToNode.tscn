[gd_scene load_steps=2 format=3 uid="uid://dq74ovxo7ghob"]

[sub_resource type="GDScript" id="GDScript_bcx52"]
script/source = "extends Node

var parent_container

@onready var empty_holder_child_count = $templateCellHolder.get_child_count()

@export var cell_container : Node

@export var loot_bag_scene: PackedScene


func _init():
  tree_entered.connect(on_tree_entered)
  tree_exited.connect(on_tree_exited)


func on_tree_entered():
  on_tree_exited() #exit tree and the re-attach
  var new_parent_container = Lib.get_parent_in_group(self, 'gear_container')
  if parent_container == new_parent_container:
    return #still connected
  parent_container = new_parent_container
  (func(): 
    if cell_container == null:
      push_error('No cell container export variable given')
      return
    
    #add cell holders to hboxcontainer
    var cell_count = Comp.get_prop(parent_container, 'ui_gear_cells', 6)
    for i in range(0, cell_count):
      make_new_holder_child()
    
    #add current gear ndoes:
    for possible_gear_node in parent_container.get_children():
      if not possible_gear_node.is_in_group('gear'):
        continue
      on_added_container_node(possible_gear_node)
    
    #for future gear nodes:
    parent_container.child_entered_tree.connect(on_added_container_node)
  ).call_deferred()
  

func on_tree_exited():
  if parent_container == null:
    return #already unparented
  var current_gear_container = Lib.get_parent_in_group(self, 'gear_container')
  if current_gear_container != null:
    return #not unparented from container
  parent_container.child_entered_tree.disconnect(on_added_container_node)


func make_new_holder_child():
  var cell_holder_template = $templateCellHolder
  var new_cell_holder = cell_holder_template.duplicate(DUPLICATE_GROUPS & DUPLICATE_SCRIPTS & DUPLICATE_SIGNALS)
  new_cell_holder.visible = true
  new_cell_holder.process_mode = Node.PROCESS_MODE_INHERIT
  new_cell_holder.add_to_group('ui_cell_holder')
  Comp.set_prop(new_cell_holder, 'get_parent_container', func(): return parent_container)
  var click_area = new_cell_holder.get_node('Area2D')
  Comp.set_prop(click_area, 'on_direct_mouse_event', holder_on_direct_mouse_event.bind(new_cell_holder))
  Comp.set_prop(click_area, 'own_dragging_started', holder_own_dragging_started.bind(new_cell_holder))
  Comp.set_prop(click_area, 'own_dragging_ended', holder_own_dragging_ended.bind(new_cell_holder))
  cell_container.add_child(new_cell_holder)


func on_added_container_node(new_node: Node):
  if not new_node.is_in_group('gear'):
    return
  
  if not Comp.has_prop(new_node, 'make_ui_cell'):
    return
  
  #check node hasn't been added already
  for cell_holder in cell_container.get_children():
    var gear_cell_node = Lib.get_first_immediate_child_in_group(cell_holder, 'ui_gear_cell')
    if gear_cell_node == null:
      continue
    var cells_gear_node = Comp.call_method_or(gear_cell_node, 'get_gear_node', [], null)
    if cells_gear_node == new_node:
      return #new node is already present
  
  #add to first empty holder
  for cell_holder in cell_container.get_children():
    if cell_holder.get_child_count() == empty_holder_child_count: #only add to empty cell holders
      var gear_cell_node = Comp.call_method(new_node, 'make_ui_cell')
      gear_cell_node.add_to_group('ui_gear_cell')
      cell_holder.add_child(gear_cell_node)
      return


func get_gear_cell_drag_texture(gear_cell: Node):
  var cell_drag_texture = Comp.call_method_or(gear_cell, 'get_drag_texture', [], null)
  if cell_drag_texture != null:
    return cell_drag_texture
  
  cell_drag_texture = Comp.get_prop(gear_cell, 'dragging_display_texture')
  if cell_drag_texture != null:
    return cell_drag_texture
  
  cell_drag_texture = gear_cell.texture if ('texture' in gear_cell) else null
  if cell_drag_texture != null:
    return cell_drag_texture
  
  cell_drag_texture = Lib.get_first_immediate_child_texture(gear_cell)
  if cell_drag_texture != null:
    return cell_drag_texture
  
  return null


func holder_on_direct_mouse_event(event: InputEventMouse, holder_node: Node):
  get_viewport().set_input_as_handled()
  if not (event is InputEventMouseButton):
    return
  if event.pressed:
    return
  if Lib.is_dragging:
    return
  
  var gear_cell_node = Lib.get_first_immediate_child_in_group(holder_node, 'ui_gear_cell')
  if gear_cell_node == null:
    return #no gear cell in this holder, ie: its empty
  
  if event.shift_pressed:
    var gear_node = Comp.call_method_or(gear_cell_node, 'get_gear_node', [], null)
    if gear_node == null:
      return #probably no get_gear_node method on cell, otherwise cell's gear node shouldnt be null (an error)
    
    if not Lib.is_child_of(Lib.player_character, gear_node):
      #move gear node to character
      gear_node.reparent(Lib.player_character)
      return
    #else: gear_node not a child of player
    
    #trying moving to first open loot bag
    var loot_display = null
    for possible_open_loot_display in get_viewport().get_tree().get_nodes_in_group('loot_bag_display_popup'):
      if possible_open_loot_display.visible == true:
        loot_display = possible_open_loot_display
        break
    if loot_display == null:
      return #no open loot display found
    
    var loot_container = Lib.get_parent_in_group(loot_display, 'gear_container')
    if loot_container == null:
      push_error('Loot container popup has no container parent')
      return
    
    gear_node.reparent(loot_container)
    return
  #
  
  #shift not pressed, just a regular mouse button release
  match event.button_index:
    MOUSE_BUTTON_LEFT: Comp.run_method(gear_cell_node, 'handle_left_clicked', [event])
    MOUSE_BUTTON_RIGHT: Comp.run_method(gear_cell_node, 'handle_right_clicked', [event])


func holder_own_dragging_started(holder_node: Node):
  var gear_cell = Lib.get_first_immediate_child_in_group(holder_node, 'ui_gear_cell')
  if gear_cell == null:
    return
  var cell_drag_texture = get_gear_cell_drag_texture(gear_cell)
  Lib.dragging_display.texture = cell_drag_texture if (cell_drag_texture != null) else null


func holder_own_dragging_ended(_max_z_collider, holder_node: Node):
  var gear_cell = Lib.get_first_immediate_child_in_group(holder_node, 'ui_gear_cell')
  if gear_cell == null:
    return #holder_node is an empty holder
  
  #query colliders at the mouse
  var ordered_collider_query = Lib.get_z_ordered_collider_query_at(Lib.player_character.get_global_mouse_position())
  
  #see if query results contains a ui_cell_holder
  var other_cell_holder = Lib.get_first_nonnull_return(ordered_collider_query, func(collider_result):
    var collider = collider_result.collider
    return Lib.get_parent_in_group(collider, 'ui_cell_holder')
  )
  if other_cell_holder != null:
    #swap clicked holder cell's and this cell's contents
    if Lib.is_child_of(parent_container, other_cell_holder):
      swap_sibling_holders_cells(holder_node, other_cell_holder)
    else: #is other container's cell holder
      swap_foreign_holders_cells(holder_node, other_cell_holder)
    return
  
  var gear_node = Comp.call_method_or(gear_cell, 'get_gear_node', [], null)
  if gear_node == null:
    return #probably no get_gear_node method on gear_cell

  #see if query was over a container body (eg: a loot bag)
  var gear_container = Lib.get_first_nonnull_return(ordered_collider_query, func(collider_result):
    var collider = collider_result.collider
    return Lib.get_parent_in_group(collider, 'gear_container')
  )
  if (gear_container != null) and Comp.get_prop(gear_container, 'accepts_gear_drops', false):
    gear_node.reparent(gear_container)
    return

  #otherwise, dropped over nothing, so spawn a loot bag
  var game_world = Lib.get_parent_in_group(self, 'game_world')
  if game_world == null:
    push_error('No game_world group parent to place loot bag droo')
    return
  var new_loot_bag = (loot_bag_scene if loot_bag_scene else Game.default_loot_bag).instantiate()
  new_loot_bag.global_position = Lib.player_character.get_global_mouse_position()
  gear_node.reparent(new_loot_bag)
  game_world.add_child(new_loot_bag)
  

func swap_sibling_holders_cells(holder_node_1: Node, holder_node_2: Node):
  var gear_cell_1 = Lib.get_first_immediate_child_in_group(holder_node_1, 'ui_gear_cell')
  var gear_cell_2 = Lib.get_first_immediate_child_in_group(holder_node_2, 'ui_gear_cell')
  if gear_cell_1 != null:
    gear_cell_1.reparent(holder_node_2, false)
  if gear_cell_2 != null:
    gear_cell_2.reparent(holder_node_1, false)


func swap_foreign_holders_cells(holder_node_1: Node, holder_node_2: Node):
  var gear_cell_1 = Lib.get_first_immediate_child_in_group(holder_node_1, 'ui_gear_cell')
  var gear_cell_2 = Lib.get_first_immediate_child_in_group(holder_node_2, 'ui_gear_cell')
  if gear_cell_1 != null:
    var parent_container_2 = Comp.call_method_or(holder_node_2, 'get_parent_container', [], null)
    var gear_node_1 = Comp.call_method_or(gear_cell_1, 'get_gear_node', [], null)
    Comp.run_method(gear_cell_1, 'retain_on_reparent_once')
    gear_cell_1.reparent(holder_node_2, false)
    gear_node_1.reparent(parent_container_2, false)
  if gear_cell_2 != null:
    var parent_container_1 = Comp.call_method_or(holder_node_1, 'get_parent_container', [], null)
    var gear_node_2 = Comp.call_method_or(gear_cell_2, 'get_gear_node', [], null)
    Comp.run_method(gear_cell_2, 'retain_on_reparent_once')
    gear_cell_2.reparent(holder_node_1, false)
    gear_node_2.reparent(parent_container_1, false)
























"

[node name="mirrorContainerGearNodesToNode" type="Node"]
script = SubResource("GDScript_bcx52")
