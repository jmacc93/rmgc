[gd_scene load_steps=2 format=3 uid="uid://bxq2rdalfohtw"]

[sub_resource type="GDScript" id="GDScript_d5dnm"]
script/source = "extends Node

var gear_node_parent #should be parent

var retain_active_gear_cell = false

var active_gear_cell : Control = null

func _notification(what):
  match what:
    NOTIFICATION_PARENTED:
      gear_node_parent = get_parent()
      if gear_node_parent == null:
        push_error('No gear node parent')
        return
      
      Comp.set_prop(gear_node_parent, 'make_ui_cell', make_ui_cell)
      
      if not gear_node_parent.tree_exited.is_connected(on_gear_exit_tree):
        gear_node_parent.tree_exited.connect(on_gear_exit_tree)
    
    NOTIFICATION_UNPARENTED:
      Comp.remove_prop(gear_node_parent, 'make_ui_cell')
      if gear_node_parent.tree_exited.is_connected(on_gear_exit_tree):
        gear_node_parent.tree_exited.disconnect(on_gear_exit_tree)


func on_gear_exit_tree():
  if gear_node_parent.get_parent() != null:
    return #gear node wasn't unparented

  if retain_active_gear_cell:
    retain_active_gear_cell = false
    return
  if active_gear_cell != null:
    active_gear_cell.queue_free()


func make_ui_cell():
  var template_node = get_node_or_null('templateGearCell')
  if template_node == null: #look for sibling if template isnt a child
    template_node = get_node_or_null('../templateGearCell')
  var cell = template_node.duplicate(DUPLICATE_GROUPS & DUPLICATE_SCRIPTS & DUPLICATE_SIGNALS)
  cell.process_mode = Node.PROCESS_MODE_INHERIT
  cell.visible = true
  Comp.set_prop(cell, 'handle_left_clicked', handle_left_clicked)
  Comp.set_prop(cell, 'get_gear_node', get_gear_node)
  Comp.set_prop(cell, 'retain_on_reparent_once', retain_on_reparent_once)
  active_gear_cell = cell
  Watch.notify(self, 'gear_cell_created', [cell]) #this line is so additional behaviors can be added by other nodes
  return cell


func get_gear_node():
  return gear_node_parent


func handle_left_clicked(event: InputEventMouse):
  Comp.run_method(gear_node_parent, 'handle_left_clicked', [event])


func retain_on_reparent_once():
  retain_active_gear_cell = true
"

[node name="makeGearUiCell" type="Node"]
editor_description = "This is the prototypical ui gear cell maker. It essentially just duplicates its child `templateGearCell` for display in containers (ie: loot bags) and the player's inventory

This provides the closest parent `gear`-group composite  with a `make_ui_cell` method which will be called by inventories (ie: loot bags and player inventories) to display whatever `Control` object is returned by it

The `Watch.call_on_notify` signal `gear_cell_created` is emitted when a new gear cell has been created. You can use this to extend `makeGearUiCell`'s behavior in another node, by using `Watch.call_on_notify(the_makeGearUiCell_node, \"gear_cell_created\", function_to_modify_the_gear_cell)`

Needs:
  * Gear node as parent
  * Needs templateGearCell child which is process deactivated and not visible

The `templateGearCell` child will be duplicated and inserted into the gear cell"
script = SubResource("GDScript_d5dnm")
