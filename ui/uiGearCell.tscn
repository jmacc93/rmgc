[gd_scene load_steps=4 format=3 uid="uid://bjlqydebmrist"]

[sub_resource type="GDScript" id="GDScript_64v8g"]
script/source = "extends Control

var target_parent

@export var gear_node : Node

@export var target_parent_group = 'container'

@export var highlighted_color : Color
@export var non_highlighted_color : Color

@onready var dragging_display = Sprite2D.new()

var mouse_is_down = false
var mouse_down_at : Vector2
@export var drag_start_distance = 8

var is_dragging = false

var mouse_over = false


func _init():
  set_process_input(false)


func _ready():
  dragging_display.z_index = 2000
  
  target_parent = Lib.get_parent_in_group(self, target_parent_group)
  if target_parent == null:
    push_error('No ', target_parent_group,' parent node for given node')
    queue_free()
    return


#when I'm the highest z_index ui cell and I'm clicked:
func on_direct_mouse_event(event: InputEventMouse):
  if not (event is InputEventMouseButton):
    return
  
  #we handle dragging in _input because we want to also handle it when also mouse isn't touching this ui cell
  if is_dragging:
    return
  
  #right click, middle click, etc: just inform others
  if not (event.button_index == MOUSE_BUTTON_LEFT):
    Watch.notify(Watch.ui_notifier, 'ui_cell_input', [self, event])
    return
  
  #if left mouse is released
  if not event.pressed:
    
    if (Lib.dragged_data == null) or (not is_instance_valid(Lib.dragged_data)):
      #nothing is being dragged
      Watch.notify(Watch.ui_notifier, 'ui_cell_input', [self, event])
      get_viewport().set_input_as_handled()
      return
    
    if not Lib.dragged_data.is_in_group('ui_gear_cell'):
      return #dragged data isn't a gear cell
    
    handle_dropped_cell(Lib.dragged_data)
    get_viewport().set_input_as_handled()
    Lib.dragged_data = null
    return
  
  #
  
  if gear_node == null:
    #this cell is empty
    get_viewport().set_input_as_handled()
    return
  
  #here: left button is pressed and have gear_node
  #engage _input for dragging behavior
  mouse_is_down = true
  mouse_down_at = get_viewport().get_mouse_position()
  set_process_input(true)
  get_viewport().set_input_as_handled() #don't let us fire through the ui


func handle_dropped_cell(dropped_cell: Control):
  var is_my_parent_their_parent = (dropped_cell.target_parent_group == target_parent_group) and Lib.is_child_of(target_parent, dropped_cell)
  if is_my_parent_their_parent:
    return #in same parent, don't need to move
  #now we know dropped_cell is in a different container or character
  
  Watch.notify(Watch.ui_notifier, 'ui_cell_removed', [dropped_cell])
  dropped_cell.gear_node.reparent(target_parent)


#engages dragging if mouse_is_down and mouse is moved a short distance
#and disengages dragging on button release
func _input(event: InputEvent):
  if not mouse_is_down:
    return #redundancy
  
  #section to stop dragging:
  if event is InputEventMouseButton:
    if not (event.button_index == MOUSE_BUTTON_LEFT):
      return #ignore right, middle, etc presses
    #is mouse up?
    if not event.pressed:
      #then stop dragging
      mouse_is_down = false
      set_process_input(false)
      if is_dragging:
        stop_dragging()
    return #ignore right, middle, etc presses
  
  #section to continue dragging (obviously):
  if is_dragging:
    continue_dragging()
    return
  
  #section to start dragging:
  var current_mouse_position = get_viewport().get_mouse_position()
  var drag_distance = (mouse_down_at - current_mouse_position).length()
  if drag_distance > drag_start_distance:
    start_dragging()


func start_dragging():
  is_dragging = true
  dragging_display.texture = $TextureRect.texture
  dragging_display.global_position = get_global_mouse_position()
  get_node('/root').add_child(dragging_display)
  Lib.dragged_data = self


func continue_dragging():
  dragging_display.global_position = get_global_mouse_position()


func stop_dragging():
  is_dragging = false
  dragging_display.get_parent().remove_child(dragging_display)


func find_ui_display_texture(node: Node) -> Texture2D:
  var resource = node.get_meta('ui_cell_display')
  if (resource != null) and (resource is Texture2D):
    return resource
  else:
    return null


func is_empty():
  return (gear_node == null)


func mirror_gear_node_highlighting():
  var gear_highlighted = Comp.get_object_meta(gear_node, 'ui_cell_highlight')
  $background.color = highlighted_color if gear_highlighted else non_highlighted_color


func set_gear_node(new_gear_node: Node):
  gear_node = new_gear_node
  if gear_node == null:
    $background.color = non_highlighted_color
    return
  
  gear_node.connect('tree_exiting', func():
    Watch.stop_calling_on_set_meta(gear_node, 'ui_cell_highlight', mirror_gear_node_highlighting)
    $TextureRect.texture = null
    set_gear_node(null)
  , CONNECT_ONE_SHOT)
  
  mirror_gear_node_highlighting()
  Watch.call_on_set_meta(gear_node, 'ui_cell_highlight', mirror_gear_node_highlighting )
  
  var display_texture = find_ui_display_texture(gear_node)
  $TextureRect.texture = display_texture













"

[sub_resource type="GDScript" id="GDScript_4jlsw"]
script/source = "extends Area2D

func on_direct_mouse_event(event: InputEventMouse):
  get_parent().on_direct_mouse_event(event)
"

[sub_resource type="RectangleShape2D" id="RectangleShape2D_3inqr"]
size = Vector2(10, 10)

[node name="uiGearCell" type="TextureButton" node_paths=PackedStringArray("gear_node") groups=["ui_gear_cell"]]
editor_description = "It requires a composite object parent. This composite is what its `gear_node`'s methods are called on when the cell is clicked

`gear_node` property must be set, and is a `gear` node in `gear` group

This cell is highlighted if `gear_node`  has meta `ui_cell_highlighted`

It uses `gear_node`'s meta `ui_cell_display` texture resource to display an image

When clicked it calls `gear_node`'s meta `ui_cell_left_click`, `ui_cell_right_click` etc as a method on `gear_node`. ie: `gear_node.call(gear_node.get_meta('ui_cell_left_click'), [composite])

"
custom_minimum_size = Vector2(10, 10)
mouse_filter = 2
script = SubResource("GDScript_64v8g")
gear_node = NodePath("")
highlighted_color = Color(0.644911, 0.786938, 0.712107, 1)
non_highlighted_color = Color(0.905882, 0.690196, 0.619608, 1)

[node name="background" type="ColorRect" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2
color = Color(0.905882, 0.690196, 0.619608, 1)
metadata/highlight_color = Color(0.644911, 0.786938, 0.712107, 1)

[node name="TextureRect" type="TextureRect" parent="."]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2
mouse_filter = 2
expand_mode = 1
stretch_mode = 6

[node name="mouseOverArea" type="Area2D" parent="."]
script = SubResource("GDScript_4jlsw")

[node name="CollisionShape2D" type="CollisionShape2D" parent="mouseOverArea"]
visible = false
position = Vector2(5, 5)
shape = SubResource("RectangleShape2D_3inqr")
